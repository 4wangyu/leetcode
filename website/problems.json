[
  {
    "title": "Two Sum",
    "titleSlug": "two-sum",
    "status": "ac",
    "content": "<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\r\n\r\n<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,\r\nreturn [<strong>0</strong>, <strong>1</strong>].\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n  var map = new Map();\n  var len = nums.length;\n  \n  for(var i = 0; i < len; i++){\n      var num = nums[i];\n      var complement = target - num;\n      if(map.has(complement)){\n         return [map.get(complement), i];\n      } else {\n        map.set(num, i);\n      }\n  }\n};",
    "lang": "javascript"
  },
  {
    "title": "Add Two Numbers",
    "titleSlug": "add-two-numbers",
    "status": "ac",
    "content": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    var head = new ListNode(0);\n    var tail = head;\n    var carryover = 0;\n    \n    while(l1 != null || l2 != null){\n        var sum = (l1 == null ? 0 : l1.val) \n                  + (l2 == null ? 0 : l2.val) \n                  + carryover;\n        carryover = Math.floor(sum / 10);\n        var nextNode = new ListNode(sum % 10);\n        tail.next = nextNode;\n        tail = tail.next;\n        l1 = l1 ? l1.next : null;\n        l2 = l2 ? l2.next : null;\n    }\n    \n    if(carryover > 0){\n        var nextNode = new ListNode(carryover);\n        tail.next = nextNode;\n    }\n    \n    return head.next;\n};",
    "lang": "javascript"
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "titleSlug": "longest-substring-without-repeating-characters",
    "status": "ac",
    "content": "<p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abcabcbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation:</strong></span> The answer is <code>&quot;abc&quot;</code>, with the length of 3. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;bbbbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong>T</span>he answer is <code>&quot;b&quot;</code>, with the length of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;pwwkew&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>The answer is <code>&quot;wke&quot;</code>, with the length of 3. \r\n             Note that the answer must be a <b>substring</b>, <code>&quot;pwke&quot;</code> is a <i>subsequence</i> and not a substring.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var len = s.length;\n    var max = 0;\n    var map = new Map();\n    \n    for(var i = 0; i < len; i++){\n        var c = s.charAt(i);\n        while(map.has(c)) map.delete(map.keys().next().value);\n        map.set(c, 1);\n        max = Math.max(max, map.size);\n    }\n    \n    return max;\n};",
    "lang": "javascript"
  },
  {
    "title": "Median of Two Sorted Arrays",
    "titleSlug": "median-of-two-sorted-arrays",
    "status": "ac",
    "content": "<p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p>\r\n\r\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\r\n\r\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong>&nbsp;cannot be both empty.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 3]\r\nnums2 = [2]\r\n\r\nThe median is 2.0\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\nThe median is (2 + 3)/2 = 2.5\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);\n    \n    const x = nums1.length, y = nums2.length;\n    let lo = 0, hi = x;\n    \n    while(lo <= hi) {\n        let partitionX = (lo + hi) / 2 | 0,\n            partitionY = (x + y + 1) / 2 - partitionX | 0;\n        \n        let maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\n        let minRightX = partitionX === x ? Infinity : nums1[partitionX];\n        \n        let maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\n        let minRightY = partitionY === y ? Infinity : nums2[partitionY];\n        \n        if(maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if((x + y) & 1) return Math.max(maxLeftX, maxLeftY);\n            return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n        } else if(maxLeftX > minRightY) {\n            hi = partitionX - 1;\n        } else {\n            lo = partitionX + 1;\n        }\n    }\n};",
    "lang": "javascript"
  },
  {
    "title": "Longest Palindromic Substring",
    "titleSlug": "longest-palindromic-substring",
    "status": "ac",
    "content": "<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;babad&quot;\r\n<strong>Output:</strong> &quot;bab&quot;\r\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;cbbd&quot;\r\n<strong>Output:</strong> &quot;bb&quot;\r\n</pre>\r\n",
    "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    var len = s.length;\n    var pal = \"\";\n    \n    var offset = 1;\n    for(var i = 0; i < len; i++){\n        if(i < len - 1 && s.charAt(i) == s.charAt(i+1)){\n            while(i-offset >= 0 && i+1+offset < len \n                  && s.charAt(i-offset) ==  s.charAt(i+1+offset)){\n                offset ++;\n            }\n            var palEven = s.substring(i+1-offset, i+1+offset);\n            pal = pal.length >= palEven.length ? pal : palEven;\n            offset = 1;\n        }\n        \n        while(i-offset >= 0 && i+offset < len \n              && s.charAt(i-offset) ==  s.charAt(i+offset)){\n            offset ++;\n        }\n        var palOdd = s.substring(i+1-offset, i+offset);\n        pal = pal.length >= palOdd.length ? pal : palOdd;\n        offset = 1;\n    }\n    \n    return pal;\n};",
    "lang": "javascript"
  },
  {
    "title": "ZigZag Conversion",
    "titleSlug": "zigzag-conversion",
    "status": "ac",
    "content": "<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\r\n\r\n<pre>\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n</pre>\r\n\r\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\r\n\r\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\r\n\r\n<pre>\r\nstring convert(string s, int numRows);</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\r\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows =&nbsp;4\r\n<strong>Output:</strong>&nbsp;&quot;PINALSIGYAHRPI&quot;\r\n<strong>Explanation:</strong>\r\n\r\nP     I    N\r\nA   L S  I G\r\nY A   H R\r\nP     I</pre>\r\n",
    "code": "/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    if(numRows == 1) return s;\n    \n    var getChar = function(str, idx){\n        if(idx < 0 || idx >= str.length) return '';\n        return str.charAt(idx);\n    }\n    \n    var out = '';\n    var len = s.length;\n    for(var i = 0; i < numRows; i++){\n        var pos = 0;\n        while(pos + 2 - numRows <= len){\n            if(i == 0 || i == numRows - 1){\n                out += getChar(s, pos + i);\n            } else {\n                out += getChar(s, pos - i) + getChar(s, pos + i);\n            }\n            pos += 2 * numRows - 2;\n        }\n    }\n    \n    return out;\n};",
    "lang": "javascript"
  },
  {
    "title": "Reverse Integer",
    "titleSlug": "reverse-integer",
    "status": "ac",
    "content": "<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 123\r\n<strong>Output:</strong> 321\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -123\r\n<strong>Output:</strong> -321\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 120\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n",
    "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(y) {\n    var reverseAbs = function(x){\n        if (x == 0) return '';\n        return x%10 + reverseAbs(Math.floor(x/10));\n    }\n    var limit = 2147483648;\n    var rvsdY = reverseAbs(Math.abs(y));\n    \n    if(rvsdY > limit || y == 0) return 0;\n    return parseInt((y < 0 ? '-' : '') + rvsdY);\n};\n",
    "lang": "javascript"
  },
  {
    "title": "String to Integer (atoi)",
    "titleSlug": "string-to-integer-atoi",
    "status": "ac",
    "content": "<p>Implement <code><span>atoi</span></code> which&nbsp;converts a string to an integer.</p>\r\n\r\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\r\n\r\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\r\n\r\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\r\n\r\n<p>If no valid conversion could be performed, a zero value is returned.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li>\r\n\t<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. If the numerical value is out of the range of representable values, INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) or INT_MIN (&minus;2<sup>31</sup>) is returned.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;42&quot;\r\n<strong>Output:</strong> 42\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;   -42&quot;\r\n<strong>Output:</strong> -42\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;-&#39;, which is the minus sign.\r\n&nbsp;            Then take as many numerical digits as possible, which gets 42.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;4193 with words&quot;\r\n<strong>Output:</strong> 4193\r\n<strong>Explanation:</strong> Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;words and 987&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;w&#39;, which is not a numerical \r\n&nbsp;            digit or a +/- sign. Therefore no valid conversion could be performed.</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;-91283472332&quot;\r\n<strong>Output:</strong> -2147483648\r\n<strong>Explanation:</strong> The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.\r\n&nbsp;            Thefore INT_MIN (&minus;2<sup>31</sup>) is returned.</pre>\r\n",
    "code": "/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n    const INT_MAX = Math.pow(2, 31) - 1;\n    const INT_MIN = Math.pow(2, 31) * -1;\n    \n    const i = parseInt(str.trim().split(' ')[0]);\n    \n    if(isNaN(i)) return 0;\n    if(i < INT_MIN) return INT_MIN;\n    if(i > INT_MAX) return INT_MAX;\n    return i;\n};",
    "lang": "javascript"
  },
  {
    "title": "Palindrome Number",
    "titleSlug": "palindrome-number",
    "status": "ac",
    "content": "<p>Determine whether an integer is a palindrome. An integer&nbsp;is&nbsp;a&nbsp;palindrome when it&nbsp;reads the same backward as forward.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 121\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -121\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Coud you solve&nbsp;it without converting the integer to a string?</p>\r\n",
    "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n//     solution 1\n//     let a = x.toString().split('');\n    \n//     return a.slice(0, Math.ceil(a.length/2)).join('') \n//         == a.slice(a.length - Math.ceil(a.length/2), a.length).reverse().join('');\n    \n    let str = x.toString();\n    function isPal(s) {\n        if([0, 1].includes(s.length))\n            return true;\n        if(s.slice(0,1) != s.slice(s.length-1, s.length))\n            return false;\n        return isPal(s.slice(1,s.length-1));\n    }\n    \n    return isPal(str);\n};",
    "lang": "javascript"
  },
  {
    "title": "Regular Expression Matching",
    "titleSlug": "regular-expression-matching",
    "status": "ac",
    "content": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>\n\n<pre>\n&#39;.&#39; Matches any single character.\n&#39;*&#39; Matches zero or more of the preceding element.\n</pre>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;could be empty and contains only lowercase letters <code>a-z</code>.</li>\n\t<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like&nbsp;<code>.</code>&nbsp;or&nbsp;<code>*</code>.</li>\n</ul>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n",
    "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    return new RegExp('^'+p+'$').test(s);\n};\n",
    "lang": "javascript"
  },
  {
    "title": "Container With Most Water",
    "titleSlug": "container-with-most-water",
    "status": "ac",
    "content": "<p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n&nbsp;</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You may not slant the container and <i>n</i> is at least 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" /></p>\r\n\r\n<p><small>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49. </small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,8,6,2,5,4,8,3,7]\r\n<strong>Output:</strong> 49</pre>",
    "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    let l = 0, r = height.length - 1, max = 0;\n    \n    while (l < r){\n        let area = Math.min(height[l], height[r]) * (r - l);\n        max = max >= area ? max : area;\n        if(height[l] < height[r]){\n            l++;\n        } else {\n            r--;\n        }\n    }\n    \n    return max;\n};",
    "lang": "javascript"
  },
  {
    "title": "Integer to Roman",
    "titleSlug": "integer-to-roman",
    "status": "ac",
    "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\r\n\r\n<pre>\r\n<strong>Symbol</strong>       <strong>Value</strong>\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000</pre>\r\n\r\n<p>For example,&nbsp;two is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\r\n\r\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\r\n\r\n<ul>\r\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\r\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\r\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\r\n</ul>\r\n\r\n<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;3\r\n<strong>Output:</strong> &quot;III&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;4\r\n<strong>Output:</strong> &quot;IV&quot;</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;9\r\n<strong>Output:</strong> &quot;IX&quot;</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;58\r\n<strong>Output:</strong> &quot;LVIII&quot;\r\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;1994\r\n<strong>Output:</strong> &quot;MCMXCIV&quot;\r\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.</pre>\r\n",
    "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    var romanMatrix = [\n      [1000, 'M'],\n      [900, 'CM'],\n      [500, 'D'],\n      [400, 'CD'],\n      [100, 'C'],\n      [90, 'XC'],\n      [50, 'L'],\n      [40, 'XL'],\n      [10, 'X'],\n      [9, 'IX'],\n      [5, 'V'],\n      [4, 'IV'],\n      [1, 'I']\n    ];\n    \n    var rom = '';\n    for (var i = 0; i < romanMatrix.length; i++ ) {\n        rom += romanMatrix[i][1].repeat(Math.floor(num/romanMatrix[i][0]));\n        num = num % romanMatrix[i][0];\n    }\n    \n    return rom;\n};",
    "lang": "javascript"
  },
  {
    "title": "Roman to Integer",
    "titleSlug": "roman-to-integer",
    "status": "ac",
    "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\r\n\r\n<pre>\r\n<strong>Symbol</strong>       <strong>Value</strong>\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000</pre>\r\n\r\n<p>For example,&nbsp;two is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\r\n\r\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\r\n\r\n<ul>\r\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\r\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\r\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\r\n</ul>\r\n\r\n<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;III&quot;\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;IV&quot;\r\n<strong>Output:</strong> 4</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;IX&quot;\r\n<strong>Output:</strong> 9</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;LVIII&quot;\r\n<strong>Output:</strong> 58\r\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;MCMXCIV&quot;\r\n<strong>Output:</strong> 1994\r\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.</pre>\r\n",
    "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var romanMatrix = [\n      [1000, 'M'],\n      [900, 'CM'],\n      [500, 'D'],\n      [400, 'CD'],\n      [100, 'C'],\n      [90, 'XC'],\n      [50, 'L'],\n      [40, 'XL'],\n      [10, 'X'],\n      [9, 'IX'],\n      [5, 'V'],\n      [4, 'IV'],\n      [1, 'I']\n    ];\n    \n    var num = 0;\n    for (var i = 0; i < romanMatrix.length; i++ ) {\n        while(s.startsWith(romanMatrix[i][1])){\n            num += romanMatrix[i][0];\n            s = s.slice(romanMatrix[i][1].length, s.length);\n        }\n    }\n    \n    return num;\n};",
    "lang": "javascript"
  },
  {
    "title": "Longest Common Prefix",
    "titleSlug": "longest-common-prefix",
    "status": "ac",
    "content": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\r\n\r\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\r\n<strong>Output:</strong> &quot;fl&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\r\n<strong>Output:</strong> &quot;&quot;\r\n<strong>Explanation:</strong> There is no common prefix among the input strings.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>All given inputs are in lowercase letters <code>a-z</code>.</p>\r\n",
    "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    function cmnPrefix(a, b){\n        let i = 0;\n        let p = '';\n        while (i < a.length && i < b.length){\n            if(a[i] === b[i]) {\n                p += a[i];\n                i++;\n            } else {\n                break;\n            }\n        }\n        return p;\n    }\n    \n    function findCmnPrefix(strArr, prefix){\n        if(!strArr.length || !prefix.length)\n            return prefix;\n        return findCmnPrefix(strArr.splice(1, strArr.length), cmnPrefix(prefix, strArr[0]));\n    }\n    \n    if(!strs || !strs.length) return '';\n    return findCmnPrefix(strs.splice(1, strs.length), strs[0]);\n};",
    "lang": "javascript"
  },
  {
    "title": "3Sum",
    "titleSlug": "3sum",
    "status": "ac",
    "content": "<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The solution set must not contain duplicate triplets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [-1, 0, 1, 2, -1, -4],\r\n\r\nA solution set is:\r\n[\r\n  [-1, 0, 1],\r\n  [-1, -1, 2]\r\n]\r\n</pre>",
    "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n\tvar rtn = [];\n\tif (nums.length < 3) {\n\t\treturn rtn;\n\t}\n\tnums = nums.sort(function(a, b) {\n\t\treturn a - b;\n\t});\n\tfor (var i = 0; i < nums.length - 2; i++) {\n\t\tif (nums[i] > 0) {\n\t\t\treturn rtn;\n\t\t}\n\t\tif (i > 0 && nums[i] == nums[i - 1]) {\n\t\t\tcontinue;\n\t\t}\n\t\tfor (var j = i + 1, k = nums.length - 1; j < k;) {\n\t\t\tif (nums[i] + nums[j] + nums[k] === 0) {\n\t\t\t\trtn.push([nums[i], nums[j], nums[k]]);\n\t\t\t\tj++;\n\t\t\t\tk--;\n\t\t\t\twhile (j < k && nums[j] == nums[j - 1]) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\twhile (j < k && nums[k] == nums[k + 1]) {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t} else if (nums[i] + nums[j] + nums[k] > 0) {\n\t\t\t\tk--;\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn rtn;\n};",
    "lang": "javascript"
  },
  {
    "title": "3Sum Closest",
    "titleSlug": "3sum-closest",
    "status": "ac",
    "content": "<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code>&nbsp;such that the sum is closest to&nbsp;<code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [-1, 2, 1, -4], and target = 1.\r\n\r\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n    nums = nums.sort(function(a, b) {\n        return a - b;\n    });\n    \n    var rtn = nums.slice(0, 3).reduce((sum, a) => sum + a,0);\n    var dif = Math.abs(rtn - target);\n    \n    for (var i = 0; i < nums.length - 2; i++) {\n        for (var j = i + 1, k = nums.length - 1; j < k;) {\n            var sum = nums[i] + nums[j] + nums[k];\n            if (sum - target === 0) {\n                return target;\n            } else if (Math.abs(sum - target) < dif) {\n                dif = Math.abs(sum - target);\n                rtn = sum;\n            }\n            \n            if (nums[i] + nums[j] + nums[k] - target > 0) {\n                k--;\n            } else {\n                j++;\n            }\n        }\n    }\n    return rtn;\n};",
    "lang": "javascript"
  },
  {
    "title": "Letter Combinations of a Phone Number",
    "titleSlug": "letter-combinations-of-a-phone-number",
    "status": "ac",
    "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>\r\n\r\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\r\n\r\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\" /></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;23&quot;\r\n<strong>Output:</strong> [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\r\n",
    "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nlet letterCombinations = function(digits) {\n    const map = {\n\t\t\"2\": [\"a\", \"b\", \"c\"],\n\t\t\"3\": [\"d\", \"e\", \"f\"],\n\t\t\"4\": [\"g\", \"h\", \"i\"],\n\t\t\"5\": [\"j\", \"k\", \"l\"],\n\t\t\"6\": [\"m\", \"n\", \"o\"],\n\t\t\"7\": [\"p\", \"q\", \"r\", \"s\"],\n\t\t\"8\": [\"t\", \"u\", \"v\"],\n\t\t\"9\": [\"w\", \"x\", \"y\", \"z\"]\n\t};\n    \n    function appendLetter(pee, per) {\n        let a = [];\n        for(let i = 0; i < pee.length; i++){\n            for(let j = 0; j < per.length; j++){\n                a.push(pee[i] + per[j]);\n            }    \n        }\n        return a;\n    }\n    \n    function combLetter(arr, nums) {\n        if(!nums) {\n            return arr;\n        }\n        return combLetter(appendLetter(arr, map[nums[0]]), nums.slice(1));\n    }\n    \n    if(!digits)\n        return [];\n    return combLetter(map[digits[0]], digits.slice(1));\n};",
    "lang": "javascript"
  },
  {
    "title": "4Sum",
    "titleSlug": "4sum",
    "status": "ac",
    "content": "<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The solution set must not contain duplicate quadruplets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [1, 0, -1, 0, -2, 2], and target = 0.\r\n\r\nA solution set is:\r\n[\r\n  [-1,  0, 0, 1],\r\n  [-2, -1, 1, 2],\r\n  [-2,  0, 0, 2]\r\n]\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    var rtn = [];\n    if (nums.length < 4) {\n        return rtn;\n    }\n    \n    nums = nums.sort(function(a, b) {\n        return a - b;\n    });\n    const res = new Set();\n    \n    for (var m = 0; m < nums.length - 3; m++) {\n        for (var i = m + 1; i < nums.length - 2; i++) {\n            for (var j = i + 1, k = nums.length - 1; j < k;) {\n                if (nums[m] + nums[i] + nums[j] + nums[k] === target) {\n                    const abcd = [nums[m], nums[i], nums[j], nums[k]];\n                    res.add(abcd.sort().join(','));\n                    j++;\n                    k--;\n                } else if (nums[m] + nums[i] + nums[j] + nums[k] > target) {\n                    k--;\n                } else {\n                    j++;\n                }\n            }\n        }\n    }\n    \n    rtn = [...res].map(abcd => abcd.split(',').map(e => parseInt(e)));\n    return rtn;\n};",
    "lang": "javascript"
  },
  {
    "title": "Remove Nth Node From End of List",
    "titleSlug": "remove-nth-node-from-end-of-list",
    "status": "ac",
    "content": "<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven linked list: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, and <strong><em>n</em> = 2</strong>.\r\n\r\nAfter removing the second node from the end, the linked list becomes <strong>1-&gt;2-&gt;3-&gt;5</strong>.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Given <em>n</em> will always be valid.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Could you do this in one pass?</p>\r\n",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    function getNode(h, m) {\n        var rst = h;\n        while(m > 0) {\n            rst = rst.next;\n            m--;\n        }\n        return rst;\n    }\n    \n    var l = head;\n    var r = getNode(head, n);\n    if (!r) return head.next;\n    \n    while(r.next) {\n        r = r.next;\n        l = l.next;\n    }\n    l.next = l.next.next;\n    \n    return head;\n};",
    "lang": "javascript"
  },
  {
    "title": "Valid Parentheses",
    "titleSlug": "valid-parentheses",
    "status": "ac",
    "content": "<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\r\n\r\n<p>An input string is valid if:</p>\r\n\r\n<ol>\r\n\t<li>Open brackets must be closed by the same type of brackets.</li>\r\n\t<li>Open brackets must be closed in the correct order.</li>\r\n</ol>\r\n\r\n<p>Note that an empty string is&nbsp;also considered valid.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;()&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;()[]{}&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(]&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;([)]&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;{[]}&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n",
    "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const map = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    \n    s = s.split('');\n    let t = [];\n    \n    while(s.length) {\n        if (!map[s[0]]) {\n            t.push(s[0]);\n            s.splice(0, 1)\n        } else if (t.length && t[t.length - 1] === map[s[0]]) {\n            t.splice(t.length - 1, 1);\n            s.splice(0, 1);\n        } else {\n            return false;\n        }\n    }\n    \n    if(t.length) return false;\n    \n    return true;\n};",
    "lang": "javascript"
  },
  {
    "title": "Merge Two Sorted Lists",
    "titleSlug": "merge-two-sorted-lists",
    "status": "ac",
    "content": "<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> 1->2->4, 1->3->4\r\n<b>Output:</b> 1->1->2->3->4->4\r\n</pre>\r\n</p>",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    let mergedList = new ListNode(0);\n    let p = mergedList;\n    \n    while(l1 && l2) {\n        if(l1.val < l2.val) {\n            p.next = l1;\n            l1 = l1.next;\n        } else {\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    if(l1) p.next = l1;\n    if(l2) p.next = l2;\n    \n    return mergedList.next;\n};",
    "lang": "javascript"
  },
  {
    "title": "Generate Parentheses",
    "titleSlug": "generate-parentheses",
    "status": "ac",
    "content": "<p>\r\nGiven <i>n</i> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\r\n</p>\r\n\r\n<p>\r\nFor example, given <i>n</i> = 3, a solution set is:\r\n</p>\r\n<pre>\r\n[\r\n  \"((()))\",\r\n  \"(()())\",\r\n  \"(())()\",\r\n  \"()(())\",\r\n  \"()()()\"\r\n]\r\n</pre>",
    "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    let ans = [];\n    function backtrack(s = '', left = 0, right = 0) {\n        if(s.length === 2 * n) {\n            ans.push(s);\n            return;\n        }\n        if(left < n)\n            backtrack(s+'(', left+1, right);\n        if(right < left)\n            backtrack(s+')', left, right+1);\n    }\n    backtrack();\n    return ans;\n};",
    "lang": "javascript"
  },
  {
    "title": "Merge k Sorted Lists",
    "titleSlug": "merge-k-sorted-lists",
    "status": "ac",
    "content": "<p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; 1-&gt;4-&gt;5,\r\n&nbsp; 1-&gt;3-&gt;4,\r\n&nbsp; 2-&gt;6\r\n]\r\n<strong>Output:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\r\n</pre>\r\n",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    var mergeTwoLists = function(l1, l2) {\n        let mergedList = new ListNode(0);\n        let p = mergedList;\n\n        while(l1 && l2) {\n            if(l1.val < l2.val) {\n                p.next = l1;\n                l1 = l1.next;\n            } else {\n                p.next = l2;\n                l2 = l2.next;\n            }\n            p = p.next;\n        }\n        if(l1) p.next = l1;\n        if(l2) p.next = l2;\n\n        return mergedList.next;\n    };\n    \n    if(!lists.length) return null;\n    if(lists.length === 1) return lists[0];\n    lists.push(mergeTwoLists(lists[0], lists[1]));\n    lists.splice(0, 2);\n    return mergeKLists(lists);\n};",
    "lang": "javascript"
  },
  {
    "title": "Swap Nodes in Pairs",
    "titleSlug": "swap-nodes-in-pairs",
    "status": "ac",
    "content": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head.</p>\r\n\r\n<p>You may <strong>not</strong> modify the values in the list&#39;s nodes, only nodes itself may be changed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.\r\n</pre>\r\n",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    if(!head || !head.next) \n        return head;\n    let r = head.next;\n    head.next = r.next\n    r.next = head;\n    head.next = swapPairs(head.next);\n    return r;\n};",
    "lang": "javascript"
  },
  {
    "title": "Reverse Nodes in k-Group",
    "titleSlug": "reverse-nodes-in-k-group",
    "status": "ac",
    "content": "<p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p>\r\n\r\n<p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\r\n\r\n<p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\r\n\r\n<p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Only constant extra memory is allowed.</li>\r\n\t<li>You may not alter the values in the list&#39;s nodes, only nodes itself may be changed.</li>\r\n</ul>\r\n",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nconst reverseKGroup = function(head, k) {\n    const swapPairs = function(head) {\n        if(!head || !head.next) \n            return head;\n        let r = head.next;\n        head.next = r.next\n        r.next = head;\n        head.next = swapPairs(head.next);\n        return r;\n    };\n    \n    if(k === 1) return head;\n    if(k === 2) return swapPairs(head);\n    \n    function getLen(head, l) {\n        if(!head) return l;\n        return getLen(head.next, l+1);\n    }\n    \n    function reverseGroup(h, k, f) {\n        if(f === 0) return h;\n        \n        let l = h;\n        let m = l.next;\n        let r = m.next;\n        for(let i = 0; i < k-2; i++) {\n            m.next = l;\n            l = m;\n            m = r;\n            r = r.next;\n        }\n        m.next = l;\n        h.next = reverseGroup(r, k, f-1);\n        return m;\n    }\n    \n    return reverseGroup(head, k, Math.floor(getLen(head, 0)/k));\n};",
    "lang": "javascript"
  },
  {
    "title": "Remove Duplicates from Sorted Array",
    "titleSlug": "remove-duplicates-from-sorted-array",
    "status": "ac",
    "content": "<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[1,1,2]</strong>,\r\n\r\nYour function should return length = <strong><code>2</code></strong>, with the first two elements of <em><code>nums</code></em> being <strong><code>1</code></strong> and <strong><code>2</code></strong> respectively.\r\n\r\nIt doesn&#39;t matter what you leave beyond the returned length.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,\r\n\r\nYour function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, and&nbsp;<strong><code>4</code></strong> respectively.\r\n\r\nIt doesn&#39;t matter what values are set beyond&nbsp;the returned length.\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>Confused why the returned value is an integer but your answer is an array?</p>\r\n\r\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\r\n\r\n<p>Internally you can think of this:</p>\r\n\r\n<pre>\r\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\r\nint len = removeDuplicates(nums);\r\n\r\n// any modification to <strong>nums</strong> in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\r\nfor (int i = 0; i &lt; len; i++) {\r\n&nbsp; &nbsp; print(nums[i]);\r\n}</pre>",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    let j = 0;\n    for(let i = 1; i < nums.length; i++) {\n        if(nums[i] != nums[j]) {\n            j++;\n            nums[j] = nums[i];\n        }\n    }\n    return j + 1;\n};",
    "lang": "javascript"
  },
  {
    "title": "Remove Element",
    "titleSlug": "remove-element",
    "status": "ac",
    "content": "<p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> and return the new length.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p>The order of elements can be changed. It doesn&#39;t matter what you leave beyond the new length.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[3,2,2,3]</strong>, <em>val</em> = <strong>3</strong>,\r\n\r\nYour function should return length = <strong>2</strong>, with the first two elements of <em>nums</em> being <strong>2</strong>.\r\n\r\nIt doesn&#39;t matter what you leave beyond the returned length.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[0,1,2,2,3,0,4,2]</strong>, <em>val</em> = <strong>2</strong>,\r\n\r\nYour function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> containing&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, and&nbsp;<strong>4</strong>.\r\n\r\nNote that the order of those five elements can be arbitrary.\r\n\r\nIt doesn&#39;t matter what values are set beyond&nbsp;the returned length.</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>Confused why the returned value is an integer but your answer is an array?</p>\r\n\r\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\r\n\r\n<p>Internally you can think of this:</p>\r\n\r\n<pre>\r\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\r\nint len = removeElement(nums, val);\r\n\r\n// any modification to <strong>nums</strong> in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\r\nfor (int i = 0; i &lt; len; i++) {\r\n&nbsp; &nbsp; print(nums[i]);\r\n}</pre>",
    "code": "/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function(nums, val) {\n  for(let i = 0; i < nums.length;) {\n      if (nums[i] == val) {\n          nums.splice(i, 1);\n      } else {\n          i++;\n      }\n  }  \n  \n  return nums.length;\n};",
    "lang": "javascript"
  },
  {
    "title": "Implement strStr()",
    "titleSlug": "implement-strstr",
    "status": "ac",
    "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strStr()</a>.</p>\r\n\r\n<p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> haystack = &quot;hello&quot;, needle = &quot;ll&quot;\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\r\n<strong>Output:</strong> -1\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>\r\n\r\n<p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C&#39;s&nbsp;<a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strstr()</a> and Java&#39;s&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>.</p>\r\n",
    "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    function index(h, n, i) {\n        if(h.length < n.length) return -1;\n        if(h.substring(0, n.length) === n) return i;\n        return index(h.slice(1), n, i+1);\n    }\n    return index(haystack, needle, 0);\n};",
    "lang": "javascript"
  },
  {
    "title": "Divide Two Integers",
    "titleSlug": "divide-two-integers",
    "status": "ac",
    "content": "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p>\r\n\r\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\r\n\r\n<p>The integer division should truncate toward zero.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> dividend = 10, divisor = 3\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> dividend = 7, divisor = -3\r\n<strong>Output:</strong> -2</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Both dividend and divisor&nbsp;will be&nbsp;32-bit&nbsp;signed integers.</li>\r\n\t<li>The divisor will never be 0.</li>\r\n\t<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>, &nbsp;2<sup>31</sup> &minus; 1]. For the purpose of this problem, assume that your function returns 2<sup>31</sup> &minus; 1 when the division result&nbsp;overflows.</li>\r\n</ul>\r\n",
    "code": "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n  if (divisor === 0) return 0;\n  if (dividend === 0) return 0;\n  if (dividend === -2147483648 && divisor === -1) return 2147483647;\n\n  var isPositive = true;\n  if (dividend > 0 !== divisor > 0) isPositive = false;\n\n  divisor = Math.abs(divisor);\n  dividend = Math.abs(dividend);\n\n  var count = 1,\n    result = 0,\n    base = divisor;\n\n  while (dividend >= divisor) {\n    count = 1;\n    base = divisor;\n    while (base <= (dividend >> 1)) {\n      base = base << 1;\n      count = count << 1;\n    }\n    result += count;\n    dividend -= base;\n  }\n\n  if (!isPositive) result = -result;\n  return result;\n};",
    "lang": "javascript"
  },
  {
    "title": "Substring with Concatenation of All Words",
    "titleSlug": "substring-with-concatenation-of-all-words",
    "status": "ac",
    "content": "<p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:\n  s =</strong> &quot;barfoothefoobarman&quot;,\n<strong>  words = </strong>[&quot;foo&quot;,&quot;bar&quot;]\n<strong>Output:</strong> <code>[0,9]</code>\n<strong>Explanation:</strong> Substrings starting at index 0 and 9 are &quot;barfoo&quot; and &quot;foobar&quot; respectively.\nThe output order does not matter, returning [9,0] is fine too.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:\n  s =</strong> &quot;wordgoodgoodgoodbestword&quot;,\n<strong>  words = </strong>[&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\n<strong>Output:</strong> <code>[]</code>\n</pre>\n",
    "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    if(!words.length) return [];\n    \n    const wordLen = words[0].length;\n    const arrLen = words.reduce((acc,element) => acc + element.length, 0);\n    const re = new RegExp('(.{' + wordLen + '})');\n    words = words.sort();\n    \n    function equalArr(arr1, arr2) {\n        for(let j = 0; j < arr1.length; j++){\n            if(arr1[j] != arr2[j]) return false;\n        }\n        return true;\n    }\n    \n    let rst = [];\n    for(let i = 0; i <= s.length - arrLen; i++) {\n        const splitArr = s.slice(i, i+arrLen).split(re).filter(O=>O).sort();\n        if(equalArr(words, splitArr)) rst.push(i);\n    }\n    \n    return rst;\n};",
    "lang": "javascript"
  },
  {
    "title": "Next Permutation",
    "titleSlug": "next-permutation",
    "status": "ac",
    "content": "<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\r\n\r\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\r\n\r\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> and use only constant&nbsp;extra memory.</p>\r\n\r\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>\r\n\r\n<p><code>1,2,3</code> &rarr; <code>1,3,2</code><br />\r\n<code>3,2,1</code> &rarr; <code>1,2,3</code><br />\r\n<code>1,1,5</code> &rarr; <code>1,5,1</code></p>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function(nums) {\n    function swap(nums, i, j) {\n        const t = nums[i];\n        nums[i] = nums[j];\n        nums[j] = t;\n    }\n\n    function reverse(nums, i, j) {\n        while (i < j) {\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n    }\n    \n    let left = -1;\n    for (let i = nums.length - 1; i > 0; i--) {\n        if (nums[i] > nums[i - 1]) {\n            left = i - 1;\n            break;\n        }\n    }\n \n    if (left == -1) {\n        reverse(nums, 0, nums.length - 1);\n        return;\n    }\n \n    let right = nums.length-1;\n    for (let i = nums.length-1; i >= left+1; i--) {\n        if (nums[i] > nums[left]) {\n            right = i;\n            break;\n        }\n    }\n \n    swap(nums, left, right);\n \n    reverse(nums, left + 1, nums.length - 1);\n};",
    "lang": "javascript"
  },
  {
    "title": "Longest Valid Parentheses",
    "titleSlug": "longest-valid-parentheses",
    "status": "ac",
    "content": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(()&quot;\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The longest valid parentheses substring is <code>&quot;()&quot;</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;<code>)()())</code>&quot;\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> The longest valid parentheses substring is <code>&quot;()()&quot;</code>\r\n</pre>\r\n",
    "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    let n = s.length, longest = 0;\n    let st = [];\n    for (let i = 0; i < n; i++) {\n        if (s[i] == '(') {\n            st.push(i);\n        } else {\n            if (st.length) {\n                if (s[st[st.length-1]] == '(') st.pop();\n                else st.push(i);\n            } else {\n                st.push(i);\n            }\n        }\n    }\n    if (!st.length) {\n        longest = n;\n    } else {\n        let a = n, b = 0;\n        while (st.length) {\n            b = st[st.length-1];\n            st.pop();\n            longest = Math.max(longest, a - b - 1);\n            a = b;\n        }\n        longest = Math.max(longest, a);\n    }\n    return longest;\n};",
    "lang": "javascript"
  },
  {
    "title": "Search in Rotated Sorted Array",
    "titleSlug": "search-in-rotated-sorted-array",
    "status": "ac",
    "content": "<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>\r\n\r\n<p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p>\r\n\r\n<p>Your algorithm&#39;s runtime complexity must be in the order of&nbsp;<em>O</em>(log&nbsp;<em>n</em>).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\r\n<strong>Output:</strong> -1</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n    \n  while (left <= right) {\n    let mid = Math.floor((left + right) / 2);\n    \n    if (nums[mid] === target) {\n      return mid;\n    }\n    \n    // When dividing the roated array into two halves, one must be sorted.\n    \n    // Check if the left side is sorted\n    if (nums[left] <= nums[mid]) {\n      if (nums[left] <= target && target <= nums[mid]) {\n        // target is in the left\n        right = mid - 1;\n        \n      } else {\n        // target is in the right\n        left = mid + 1;\n      }\n    } \n    \n    // Otherwise, the right side is sorted\n    else {\n      if (nums[mid] <= target && target <= nums[right]) {\n        // target is in the right\n        left = mid + 1;\n\n      } else {\n        // target is in the left\n        right = mid - 1;\n      }\n    }\n    \n    \n  }\n    \n  return -1;\n};",
    "lang": "javascript"
  },
  {
    "title": "Find First and Last Position of Element in Sorted Array",
    "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
    "status": "ac",
    "content": "<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>\r\n\r\n<p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>\r\n\r\n<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 8\r\n<strong>Output:</strong> [3,4]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 6\r\n<strong>Output:</strong> [-1,-1]</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    let firstleft = 0, lastleft = 0;\n    let firstright = nums.length - 1, lastright = nums.length - 1;\n    let first = -1, last = -1;\n    let mid;\n    \n    while (firstleft <= firstright) {\n        mid = Math.floor((firstleft + firstright) / 2);\n\n        if (nums[mid] === target && ( nums[mid-1] < nums[mid] || mid === 0)) {\n            first = mid;\n            break;\n        } else if (nums[mid] < target) {\n            firstleft = mid + 1;\n        } else {\n            firstright = mid - 1;\n        }\n    }\n    \n    while (lastleft <= lastright) {\n        mid = Math.floor((lastleft + lastright) / 2);\n\n        if (nums[mid] === target && ( nums[mid+1] > nums[mid] || mid === nums.length-1)) {\n            last = mid;\n            break;\n        } else if (nums[mid] > target) {\n            lastright = mid - 1;\n        } else {\n            lastleft = mid + 1;\n        }\n    }\n    \n    return [first, last];\n};",
    "lang": "javascript"
  },
  {
    "title": "Search Insert Position",
    "titleSlug": "search-insert-position",
    "status": "ac",
    "content": "<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\r\n\r\n<p>You may assume no duplicates in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 5\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 2\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 7\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 0\r\n<strong>Output:</strong> 0\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    \n    while(left <= right) {\n        const mid = Math.floor((left + right)/2);\n        if(nums[mid] === target) {\n            return mid;\n        } else if (nums[mid] > target && (mid === 0 || nums[mid-1]<target)) {\n            return mid;\n        } else if (nums[mid] < target && (mid === nums.length-1 || nums[mid+1]>target)) {\n            return mid+1;\n        } else if (nums[mid] > target) {\n            right = mid-1;\n        } else if (nums[mid] < target) {\n            left = mid+1;\n        }\n    }\n};",
    "lang": "javascript"
  },
  {
    "title": "Valid Sudoku",
    "titleSlug": "valid-sudoku",
    "status": "ac",
    "content": "<p>Determine if a&nbsp;9x9 Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;<strong>according to the following rules</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code> without repetition.</li>\r\n\t<li>Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\r\n\t<li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\r\n</ol>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>A partially filled sudoku which is valid.</small></p>\r\n\r\n<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\r\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\r\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\r\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\r\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\r\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\r\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\r\n]\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\r\n&nbsp; [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\r\n&nbsp; [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\r\n]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Same as Example 1, except with the <strong>5</strong> in the top left corner being \r\n    modified to <strong>8</strong>. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\r\n\t<li>Only the filled cells need to be validated according to the mentioned&nbsp;rules.</li>\r\n\t<li>The given board&nbsp;contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\r\n\t<li>The given board size is always <code>9x9</code>.</li>\r\n</ul>\r\n",
    "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    let map = new Map();\n    \n    function getKeys(x, y) {\n        const row = 'r' + y;\n        const col = 'c' + x;\n        const sqr = '' + Math.floor(x/3) + Math.floor(y/3);\n        return [row, col, sqr];\n    }\n    \n    for(let i = 0; i < 9; i++){\n        for(let j = 0; j < 9; j++) {\n            const s = board[i][j];\n            if(s !== '.'){\n                const arr = getKeys(i, j);\n                for(let a of arr) {\n                    if(!map.has(a)){\n                        map.set(a, new Map());\n                    }\n                    \n                    if(map.get(a).has(s)){\n                        return false;\n                    } else {\n                        map.get(a).set(s, 1);\n                    }\n                }\n            }\n        }\n    }\n        \n    return true;\n};",
    "lang": "javascript"
  },
  {
    "title": "Sudoku Solver",
    "titleSlug": "sudoku-solver",
    "status": "ac",
    "content": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\r\n\r\n<p>A&nbsp;sudoku solution must satisfy <strong>all of&nbsp;the following rules</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Each of the digits&nbsp;<code>1-9</code> must occur exactly&nbsp;once in each row.</li>\r\n\t<li>Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur&nbsp;exactly once in each column.</li>\r\n\t<li>Each of the the digits&nbsp;<code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\r\n</ol>\r\n\r\n<p>Empty cells are indicated by the character <code>&#39;.&#39;</code>.</p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>A sudoku puzzle...</small></p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>...and its solution numbers marked in red.</small></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The given board&nbsp;contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\r\n\t<li>You may assume that the given Sudoku puzzle will have a single unique solution.</li>\r\n\t<li>The given board size is always <code>9x9</code>.</li>\r\n</ul>\r\n",
    "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    function isValid(board, row, col, c){\n        for(let i = 0; i < 9; i++) {\n            if(board[i][col] != '.' && board[i][col] == c) return false; //check row\n            if(board[row][i] != '.' && board[row][i] == c) return false; //check column\n            if(board[3 * Math.floor(row/3) + Math.floor(i/3)][ 3 * Math.floor(col/3) + i % 3] != '.' && board[3 * Math.floor(row/3) + Math.floor(i/3)][3 * Math.floor(col/3) + i % 3] == c) return false; //check 3*3 block\n        }\n        return true;\n    }\n    \n    function solve(board){\n        for(let i = 0; i < board.length; i++){\n            for(let j = 0; j < board[0].length; j++){\n                if(board[i][j] == '.'){\n                    for(let c = '1'; c <= '9'; c++){//trial. Try 1 through 9\n                        if(isValid(board, i, j, c)){\n                            board[i][j] = '' + c; //Put c for this cell\n                            \n                            if(solve(board))\n                                return true; //If it's the solution return true\n                            else\n                                board[i][j] = '.'; //Otherwise go back\n                        }\n                    }\n                    \n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    solve(board);\n};",
    "lang": "javascript"
  },
  {
    "title": "Count and Say",
    "titleSlug": "count-and-say",
    "status": "ac",
    "content": "<p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>\n\n<pre>\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n</pre>\n\n<p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br />\n<code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br />\n<code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p>\n\n<p>Given an integer <i>n</i>&nbsp;where 1 &le; <em>n</em> &le; 30, generate the <i>n</i><sup>th</sup> term of the count-and-say sequence. You can do so recursively, in other words from the previous member&nbsp;read off the digits, counting the number of digits in groups of the same digit.</p>\n\n<p>Note: Each term of the sequence of integers will be represented as a string.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> 1\n<b>Output:</b> &quot;1&quot;\n<b>Explanation:</b> This is the base case.\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> 4\n<b>Output:</b> &quot;1211&quot;\n<b>Explanation:</b> For n = 3 the term was &quot;21&quot; in which we have two groups &quot;2&quot; and &quot;1&quot;, &quot;2&quot; can be read as &quot;12&quot; which means frequency = 1 and value = 2, the same way &quot;1&quot; is read as &quot;11&quot;, so the answer is the concatenation of &quot;12&quot; and &quot;11&quot; which is &quot;1211&quot;.\n</pre>\n",
    "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n    function next(si, n){\n        if(n === 1) {\n            return si;\n        }\n        \n        let so = '';\n        let ar = [];\n        let id = 0;\n        let mp = new Map();\n        let lc = '0';\n        \n        for(let i = 0; i < si.length; i++){\n            const ch = si.charAt(i);\n            if(ch != lc){\n                ar.push(id);\n                mp.set(id, new Map([[ch, {val: 1}]]));\n                id += 1;\n            } else {\n                mp.get(id-1).get(ch).val++;\n            }\n            lc = ch;\n        }\n        \n        for(let i = 0; i < ar.length; i++){\n            mp.get(ar[i]).forEach(function(v, k){\n                so += (v.val + k);\n            });\n        }\n        \n        return next(so, n-1);    \n    }\n    return next('1', n);\n};",
    "lang": "javascript"
  },
  {
    "title": "Combination Sum",
    "titleSlug": "combination-sum",
    "status": "ac",
    "content": "<p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sums to <code>target</code>.</p>\r\n\r\n<p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code>&nbsp;unlimited number of times.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers (including <code>target</code>) will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates = <code>[2,3,6,7], </code>target = <code>7</code>,\r\n<strong>A solution set is:</strong>\r\n[\r\n  [7],\r\n  [2,2,3]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates = [2,3,5]<code>, </code>target = 8,\r\n<strong>A solution set is:</strong>\r\n[\r\n&nbsp; [2,2,2,2],\r\n&nbsp; [2,3,3],\r\n&nbsp; [3,5]\r\n]\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    function findCom(cans, target, rst, arr) {\n        if(target === 0){\n            rst.push(arr);\n        } else {\n            for(let i = 0; i < cans.length; i++){\n                if(cans[i] <= target){\n                    let newArr = arr.slice();\n                    newArr.push(cans[i]);\n                    findCom(cans.slice(i), target-cans[i], rst, newArr);\n                }\n            }\n        }\n    }\n    \n    candidates.sort((a, b) => a - b);\n    let rst = new Array();\n    for(let i = 0; i < candidates.length; i++){\n        if(candidates[i] <= target){\n            findCom(candidates.slice(i), target-candidates[i], rst, [candidates[i]]);\n        }\n    }\n    \n    return rst;\n};",
    "lang": "javascript"
  },
  {
    "title": "Combination Sum II",
    "titleSlug": "combination-sum-ii",
    "status": "ac",
    "content": "<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sums to <code>target</code>.</p>\r\n\r\n<p>Each number in <code>candidates</code>&nbsp;may only be used <strong>once</strong> in the combination.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers (including <code>target</code>) will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\r\n<strong>A solution set is:</strong>\r\n[\r\n  [1, 7],\r\n  [1, 2, 5],\r\n  [2, 6],\r\n  [1, 1, 6]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\r\n<strong>A solution set is:</strong>\r\n[\r\n&nbsp; [1,2,2],\r\n&nbsp; [5]\r\n]\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n    function findCom(cans, target, rst, arr) {\n        if(target === 0){\n            rst.push(arr);\n        } else {\n            let last = -1;\n            for(let i = 0; i < cans.length; i++){\n                if(last != cans[i] && cans[i] <= target){\n                    let newArr = arr.slice();\n                    newArr.push(cans[i]);\n                    findCom(cans.slice(i+1), target-cans[i], rst, newArr);\n                }\n                last = cans[i];\n            }\n        }\n    }\n    \n    candidates.sort((a, b) => a - b);\n    let rst = new Array();\n    let last = -1;\n    for(let i = 0; i < candidates.length; i++){\n        if(last != candidates[i] && candidates[i] <= target){\n            findCom(candidates.slice(i+1), target-candidates[i], rst, [candidates[i]]);\n        }\n        last = candidates[i];\n    }\n    \n    return rst;\n};",
    "lang": "javascript"
  },
  {
    "title": "First Missing Positive",
    "titleSlug": "first-missing-positive",
    "status": "ac",
    "content": "<p>Given an unsorted integer array, find the smallest missing&nbsp;positive integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nInput: [1,2,0]\r\nOutput: 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nInput: [3,4,-1,1]\r\nOutput: 2\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\nInput: [7,8,9,11,12]\r\nOutput: 1\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    const len = nums.length;\n    \n    let middleman;\n    for(let i = 0; i < len; i++){\n        while(nums[i] > 0 && nums[i] <= len && (nums[nums[i]-1] != nums[i])){\n            middleman = nums[nums[i]-1];\n            nums[nums[i]-1] = nums[i];\n            nums[i] = middleman;\n        }\n    }\n    \n    for(let i = 0; i < len; i++){\n        if(nums[i] != i+1){\n            return i + 1;\n        }\n    }\n    \n    return len + 1;\n};",
    "lang": "javascript"
  },
  {
    "title": "Trapping Rain Water",
    "titleSlug": "trapping-rain-water",
    "status": "ac",
    "content": "<p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" /><br />\r\n<small>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong> for contributing this image!</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1,0,2,1,0,1,3,2,1,2,1]\r\n<strong>Output:</strong> 6</pre>\r\n",
    "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    let left = 0, right = height.length - 1;\n    let maxLeft = 0, maxRight = 0;\n    let trap = 0;\n    \n    while(left <= right){\n        if(height[left] <= height[right]){\n            if(height[left] < maxLeft){\n                trap += maxLeft - height[left];\n            } else {\n                maxLeft = height[left];\n            }\n            left ++;\n        } else {\n            if(height[right] < maxRight){\n                trap += maxRight - height[right];\n            } else {\n                maxRight = height[right];\n            }\n            right --;\n        }\n    }\n    \n    return trap;\n};",
    "lang": "javascript"
  },
  {
    "title": "Multiply Strings",
    "titleSlug": "multiply-strings",
    "status": "ac",
    "content": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> num1 = &quot;2&quot;, num2 = &quot;3&quot;\r\n<strong>Output:</strong> &quot;6&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> num1 = &quot;123&quot;, num2 = &quot;456&quot;\r\n<strong>Output:</strong> &quot;56088&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>\r\n\t<li>Both <code>num1</code> and <code>num2</code> contain&nbsp;only digits <code>0-9</code>.</li>\r\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number 0 itself.</li>\r\n\t<li>You <strong>must not use any built-in BigInteger library</strong> or <strong>convert the inputs to integer</strong> directly.</li>\r\n</ol>\r\n",
    "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    let a = [];\n    let mul, l, r, sum;\n    \n    for(let i = num1.length-1; i >= 0; i--){\n        for(let j = num2.length-1; j >= 0; j--){\n            mul = Number(num1.charAt(i)) * Number(num2.charAt(j));\n            sum  = a[i+j+1] ? a[i+j+1] + mul : mul;\n            l = Math.floor(sum/10);\n            r = sum%10;\n            \n            a[i+j+1] = r;\n            \n            if(a[i+j]){\n                a[i+j] = a[i+j] + l;\n            } else {\n                a[i+j] = l;\n            }\n        }    \n    }\n    \n    let s = 0;\n    while(s < a.length && !a[s]){\n        s++;\n    }\n    \n    return a.slice(s).join('') || '0';\n};",
    "lang": "javascript"
  },
  {
    "title": "Wildcard Matching",
    "titleSlug": "wildcard-matching",
    "status": "ac",
    "content": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.</p>\r\n\r\n<pre>\r\n&#39;?&#39; Matches any single character.\r\n&#39;*&#39; Matches any sequence of characters (including the empty sequence).\r\n</pre>\r\n\r\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>s</code>&nbsp;could be empty and contains only lowercase letters <code>a-z</code>.</li>\r\n\t<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code><font face=\"monospace\">?</font></code>&nbsp;or&nbsp;<code>*</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aa&quot;\r\np = &quot;a&quot;\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aa&quot;\r\np = &quot;*&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;cb&quot;\r\np = &quot;?a&quot;\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;adceb&quot;\r\np = &quot;*a*b&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;acdcb&quot;\r\np = &quot;a*c?b&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
    "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    let i = 0, j = 0;\n    let m = s.length, n = p.length;\n    let last_match = -1, starj = -1;\n    while (i < m){\n        if (j < n && (s[i] == p[j] || p[j] == '?')){\n            i++; j++;\n        }\n        else if (j < n && p[j] == '*'){\n            starj = j;\n            j++;\n            last_match = i;\n        }\n        else if (starj != -1){\n            j = starj + 1;\n            last_match++;\n            i = last_match;\n        }\n        else return false;\n    }\n    while (p[j] == '*' && j <n) j++;\n    return j == n;\n};",
    "lang": "javascript"
  },
  {
    "title": "Jump Game II",
    "titleSlug": "jump-game-ii",
    "status": "ac",
    "content": "<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\r\n\r\n<p>Each element in the array represents your maximum jump length at that position.</p>\r\n\r\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,3,1,1,4]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2.\r\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>You can assume that you can always reach the last index.</p>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    let jumps = 0, end = 0, furthest = 0;\n    \n    for(let i = 0; i < nums.length-1; i++){\n        furthest = Math.max(furthest, nums[i]+i);\n        if(i === end){\n            jumps++;\n            end = furthest;\n        }\n    }\n    \n    return jumps;\n};",
    "lang": "javascript"
  },
  {
    "title": "Permutations",
    "titleSlug": "permutations",
    "status": "ac",
    "content": "<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n<strong>Output:</strong>\r\n[\r\n  [1,2,3],\r\n  [1,3,2],\r\n  [2,1,3],\r\n  [2,3,1],\r\n  [3,1,2],\r\n  [3,2,1]\r\n]\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    const permu = (perm, left, rst) => {\n        if(!left.length){\n            rst.push(perm);\n        } else {\n            left.forEach((l, i) => {\n                let newPerm = perm.slice();\n                newPerm.push(l);\n                let newLeft = left.slice();\n                newLeft.splice(i,1)\n                permu(newPerm, newLeft, rst);\n            });\n        }\n    }\n    \n    let rst = [];\n    permu([], nums, rst);\n    return rst;\n};",
    "lang": "javascript"
  },
  {
    "title": "Permutations II",
    "titleSlug": "permutations-ii",
    "status": "ac",
    "content": "<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,1,2]\r\n<strong>Output:</strong>\r\n[\r\n  [1,1,2],\r\n  [1,2,1],\r\n  [2,1,1]\r\n]\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function(nums) {\n    const permu = (perm, left, rst) => {\n        if(!left.length){\n            rst.push(perm);\n        } else {\n            let prev;\n            left.forEach((l, i) => {\n                if(l !== prev) {\n                    let newPerm = perm.slice();\n                    newPerm.push(l);\n                    let newLeft = left.slice();\n                    newLeft.splice(i,1)\n                    permu(newPerm, newLeft, rst);    \n                }\n                prev = l;\n            });\n        }\n    }\n    \n    let rst = [];\n    nums.sort();\n    permu([], nums, rst);\n    return rst;\n};",
    "lang": "javascript"
  },
  {
    "title": "Rotate Image",
    "titleSlug": "rotate-image",
    "status": "ac",
    "content": "<p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p>\r\n\r\n<p>Rotate the image by 90 degrees (clockwise).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <strong>input matrix</strong> = \r\n[\r\n  [1,2,3],\r\n  [4,5,6],\r\n  [7,8,9]\r\n],\r\n\r\nrotate the input matrix <strong>in-place</strong> such that it becomes:\r\n[\r\n  [7,4,1],\r\n  [8,5,2],\r\n  [9,6,3]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <strong>input matrix</strong> =\r\n[\r\n  [ 5, 1, 9,11],\r\n  [ 2, 4, 8,10],\r\n  [13, 3, 6, 7],\r\n  [15,14,12,16]\r\n], \r\n\r\nrotate the input matrix <strong>in-place</strong> such that it becomes:\r\n[\r\n  [15,13, 2, 5],\r\n  [14, 3, 4, 1],\r\n  [12, 6, 8, 9],\r\n  [16, 7,10,11]\r\n]\r\n</pre>\r\n",
    "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    const len = matrix.length;\n    const half = Math.floor(len/2);\n    let tmp;\n    \n    for(let i = 0; i < len; i++){\n        for(let j = 0; j < half; j++){\n            tmp = matrix[i][j];\n            matrix[i][j] = matrix[i][len-1-j];\n            matrix[i][len-1-j] = tmp;\n        }\n    }\n    \n    for(let i = 0; i < len; i++){\n        for(let j = 0; j < len; j++){\n            if(i + j < len - 1){\n                tmp = matrix[i][j];\n                matrix[i][j] = matrix[len-1-j][len-1-i];\n                matrix[len-1-j][len-1-i] = tmp;\n            }\n        }\n    }\n};",
    "lang": "javascript"
  },
  {
    "title": "Group Anagrams",
    "titleSlug": "group-anagrams",
    "status": "ac",
    "content": "<p>Given an array of strings, group anagrams together.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>,\r\n<strong>Output:</strong>\r\n[\r\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\r\n  [&quot;nat&quot;,&quot;tan&quot;],\r\n  [&quot;bat&quot;]\r\n]</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All inputs will be in lowercase.</li>\r\n\t<li>The order of your output does not&nbsp;matter.</li>\r\n</ul>\r\n",
    "code": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    let map = new Map();\n    for (let str of strs){\n        const s = sort(str);\n        let l = map.get(s) || [];\n        l.push(str);\n        map.set(s, l);\n    }\n    return Array.from(map.values());\n};\n\nconst sort = function(str) {\n    return str\n        .split(\"\")\n        .sort()\n        .join(\"\");\n};",
    "lang": "javascript"
  },
  {
    "title": "Pow(x, n)",
    "titleSlug": "powx-n",
    "status": "ac",
    "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>, which calculates&nbsp;<em>x</em> raised to the power <em>n</em> (x<sup><span style=\"font-size:10.8333px\">n</span></sup>).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2.00000, 10\r\n<strong>Output:</strong> 1024.00000\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2.10000, 3\r\n<strong>Output:</strong> 9.26100\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2.00000, -2\r\n<strong>Output:</strong> 0.25000\r\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>\r\n\t<li><em>n</em> is a 32-bit signed integer, within the range&nbsp;[&minus;2<sup>31</sup>,&nbsp;2<sup>31&nbsp;</sup>&minus; 1]</li>\r\n</ul>\r\n",
    "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    if(n == 0)\n        return 1;\n    if(n<0){\n        n = -n;\n        x = 1/x;\n    }\n    return (n%2 == 0) ? myPow(x*x, Math.floor(n/2)) : x*myPow(x*x, Math.floor(n/2));\n};\n\n",
    "lang": "javascript"
  },
  {
    "title": "Binary Tree Inorder Traversal",
    "titleSlug": "binary-tree-inorder-traversal",
    "status": "ac",
    "content": "<p>Given a binary tree, return the <em>inorder</em> traversal of its nodes&#39; values.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,null,2,3]\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n<strong>Output:</strong> [1,3,2]</pre>\r\n\r\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\r\n",
    "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    function traverse(node, rst) {\n        if(node.left) {\n            traverse(node.left, rst);\n        }\n        rst.push(node.val);\n        if(node.right) {\n            traverse(node.right, rst);\n        }\n    }\n    \n    const rst = [];\n    if(!root) {\n        return rst;\n    } else {\n        traverse(root, rst);\n        return rst;\n    }\n};",
    "lang": "javascript"
  },
  {
    "title": "Triangle",
    "titleSlug": "triangle",
    "status": "ac",
    "content": "<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>\r\n\r\n<p>For example, given the following triangle</p>\r\n\r\n<pre>\r\n[\r\n     [<strong>2</strong>],\r\n    [<strong>3</strong>,4],\r\n   [6,<strong>5</strong>,7],\r\n  [4,<strong>1</strong>,8,3]\r\n]\r\n</pre>\r\n\r\n<p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong> + <strong>1</strong> = 11).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Bonus point if you are able to do this using only <em>O</em>(<em>n</em>) extra space, where <em>n</em> is the total number of rows in the triangle.</p>\r\n",
    "code": "/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n    for(let d = triangle.length-2; d >=0; d--){\n        const row = triangle[d];\n        for(let i = 0; i < row.length; i++){\n            row[i] += Math.min(triangle[d+1][i], triangle[d+1][i+1]);\n        }\n    }\n    return triangle[0][0];\n};",
    "lang": "javascript"
  },
  {
    "title": "Number of Islands",
    "titleSlug": "number-of-islands",
    "status": "ac",
    "content": "<p>Given a 2d grid map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n11110\r\n11010\r\n11000\r\n00000\r\n\r\n<strong>Output:</strong>&nbsp;1\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n11000\r\n11000\r\n00100\r\n00011\r\n\r\n<strong>Output: </strong>3\r\n</pre>",
    "code": "function DFSMarking(grid, i, j, m, n) {\n    if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] !== '1') return;\n    \n    grid[i][j] = '0';\n    DFSMarking(grid, i + 1, j, m, n);\n    DFSMarking(grid, i - 1, j, m, n);\n    DFSMarking(grid, i, j + 1, m, n);\n    DFSMarking(grid, i, j - 1, m, n);    \n}\n\n/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    let count = 0;\n    const n = grid.length;\n    if (n === 0) return 0;\n    const m = grid[0].length;\n    \n    for (let i = 0; i < n; i++){\n        for (let j = 0; j < m; j++)\n            if (grid[i][j] === '1') {\n                DFSMarking(grid, i, j, m, n);\n                ++count;\n            }\n    }    \n    \n    return count;\n};\n",
    "lang": "javascript"
  },
  {
    "title": "Random Pick Index",
    "titleSlug": "random-pick-index",
    "status": "ac",
    "content": "<p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe array size can be very large. Solution that uses too much extra space will not pass the judge.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nint[] nums = new int[] {1,2,3,3,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\r\nsolution.pick(3);\r\n\r\n// pick(1) should return 0. Since in the array only nums[0] is equal to 1.\r\nsolution.pick(1);\r\n</pre>\r\n",
    "code": "/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n    this.map  = new Map();\n    nums.forEach((n, i) => {\n        this.map.set(n, this.map.get(n) ? this.map.get(n).concat([i]) : [i]);\n    });\n    \n    this.pick = (f) => {\n        const idx = this.map.has(f) ? Math.floor(Math.random() * this.map.get(f).length) : -1;\n        return idx === -1 ? -1 : this.map.get(f)[idx];\n    };\n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */",
    "lang": "javascript"
  },
  {
    "title": "Coin Change 2",
    "titleSlug": "coin-change-2",
    "status": "ac",
    "content": "<p>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 5, coins = [1, 2, 5]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> there are four ways to make up the amount:\r\n5=5\r\n5=2+2+1\r\n5=2+1+1+1\r\n5=1+1+1+1+1\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 3, coins = [2]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b> the amount of 3 cannot be made up just with coins of 2.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 10, coins = [10] \r\n<b>Output:</b> 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>You can assume that</p>\r\n\r\n<ul>\r\n\t<li>0 &lt;= amount &lt;= 5000</li>\r\n\t<li>1 &lt;= coin &lt;= 5000</li>\r\n\t<li>the number of coins is less than 500</li>\r\n\t<li>the answer is guaranteed to fit into signed 32-bit integer</li>\r\n</ul>\r\n",
    "code": "// Algorithm explanation: https://youtu.be/jaNZ83Q3QGc\n\n/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function(amount, coins) {\n    const arr = Array(amount+1).fill(0);\n    arr[0]=1;\n    \n    for(let coin of coins) {\n        for(let i = 0; i <= amount; i++){\n            const dif = i - coin;\n            if(dif >= 0){\n                arr[i] += arr[i-coin];\n            }\n        }\n    }\n    \n    return arr[amount];\n};",
    "lang": "javascript"
  },
  {
    "title": "Maximum Length of Pair Chain",
    "titleSlug": "maximum-length-of-pair-chain",
    "status": "ac",
    "content": "<p>\r\nYou are given <code>n</code> pairs of numbers. In every pair, the first number is always smaller than the second number.\r\n</p>\r\n\r\n<p>\r\nNow, we define a pair <code>(c, d)</code> can follow another pair <code>(a, b)</code> if and only if <code>b < c</code>. Chain of pairs can be formed in this fashion. \r\n</p>\r\n\r\n<p>\r\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4]]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The longest chain is [1,2] -> [3,4]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of given pairs will be in the range [1, 1000].</li>\r\n</ol>\r\n</p>",
    "code": "/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar findLongestChain = function(pairs) {\n    pairs.sort((a, b) => a[1]-b[1]);\n    let cur = -9007199254740991, ans = 0\n    for(let pair of pairs){\n        if(pair[0] > cur){\n            cur = pair[1];\n            ans++;\n        }\n    }\n    return ans;\n};",
    "lang": "javascript"
  },
  {
    "title": "Repeated String Match",
    "titleSlug": "repeated-string-match",
    "status": "ac",
    "content": "<p>Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.</p>\r\n\r\n<p>For example, with A = &quot;abcd&quot; and B = &quot;cdabcdab&quot;.</p>\r\n\r\n<p>Return 3, because by repeating A three times (&ldquo;abcdabcdabcd&rdquo;), B is a substring of it; and B is not a substring of A repeated two times (&quot;abcdabcd&quot;).</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe length of <code>A</code> and <code>B</code> will be between 1 and 10000.</p>\r\n",
    "code": "/**\n * @param {string} A\n * @param {string} B\n * @return {number}\n */\nvar repeatedStringMatch = function(A, B) {\n    let num = 1, s = A;\n    while(s.length < B.length){\n            s += A;\n            num++;\n    }\n    \n    if(s.includes(B)) return num;\n    if((s+A).includes(B)) return num+1;\n    return -1;\n};",
    "lang": "javascript"
  },
  {
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
    "status": "ac",
    "content": "<p>Given two strings <code>s1, s2</code>, find the lowest ASCII sum of deleted characters to make two strings equal.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"sea\", s2 = \"eat\"\r\n<b>Output:</b> 231\r\n<b>Explanation:</b> Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\r\nDeleting \"t\" from \"eat\" adds 116 to the sum.\r\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"delete\", s2 = \"leet\"\r\n<b>Output:</b> 403\r\n<b>Explanation:</b> Deleting \"dee\" from \"delete\" to turn the string into \"let\",\r\nadds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\r\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\r\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < s1.length, s2.length <= 1000</code>.</li>\r\n<li>All elements of each string will have an ASCII value in <code>[97, 122]</code>.</li> \r\n</p>",
    "code": "class Solution(object):\n    def minimumDeleteSum(self, s1, s2):\n        dp = [[0] * (len(s2) + 1) for _ in xrange(len(s1) + 1)]\n\n        for i in xrange(len(s1) - 1, -1, -1):\n            dp[i][len(s2)] = dp[i+1][len(s2)] + ord(s1[i])\n        for j in xrange(len(s2) - 1, -1, -1):\n            dp[len(s1)][j] = dp[len(s1)][j+1] + ord(s2[j])\n\n        for i in xrange(len(s1) - 1, -1, -1):\n            for j in xrange(len(s2) - 1, -1, -1):\n                if s1[i] == s2[j]:\n                    dp[i][j] = dp[i+1][j+1]\n                else:\n                    dp[i][j] = min(dp[i+1][j] + ord(s1[i]),\n                                   dp[i][j+1] + ord(s2[j]))\n\n        return dp[0][0]",
    "lang": "python"
  },
  {
    "title": "Remove Comments",
    "titleSlug": "remove-comments",
    "status": "ac",
    "content": "<p>Given a C++ program, remove comments from it. The program <code>source</code> is an array where <code>source[i]</code> is the <code>i</code>-th line of the source code.  This represents the result of splitting the original source code string by the newline character <code>\\n</code>.</p>\r\n\r\n<p>In C++, there are two types of comments, line comments, and block comments.</p>\r\n<p>\r\nThe string <code>//</code> denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\r\n</p><p>\r\nThe string <code>/*</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>*/</code> should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string <code>/*/</code> does not yet end the block comment, as the ending would be overlapping the beginning.\r\n</p><p>\r\nThe first effective comment takes precedence over others: if the string <code>//</code> occurs in a block comment, it is ignored. Similarly, if the string <code>/*</code> occurs in a line or block comment, it is also ignored.\r\n</p><p>\r\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\r\n</p><p>\r\nThere will be no control characters, single quote, or double quote characters.  For example, <code>source = \"string s = \"/* Not a comment. */\";\"</code> will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\r\n</p><p>\r\nIt is guaranteed that every open block comment will eventually be closed, so <code>/*</code> outside of a line or block comment always starts a new comment.\r\n</p><p>\r\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\r\n</p>\r\n\r\n<p>After removing the comments from the source code, return the source code in the same format.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n\r\nThe line by line code is visualized as below:\r\n/*Test program */\r\nint main()\r\n{ \r\n  // variable declaration \r\nint a, b, c;\r\n/* This is a test\r\n   multiline  \r\n   comment for \r\n   testing */\r\na = b + c;\r\n}\r\n\r\n<b>Output:</b> [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n\r\nThe line by line code is visualized as below:\r\nint main()\r\n{ \r\n  \r\nint a, b, c;\r\na = b + c;\r\n}\r\n\r\n<b>Explanation:</b> \r\nThe string <code>/*</code> denotes a block comment, including line 1 and lines 6-9. The string <code>//</code> denotes line 4 as comments.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\n<b>Output:</b> [\"ab\"]\r\n<b>Explanation:</b> The original source string is \"a/*comment<b>\\n</b>line<b>\\n</b>more_comment*/b\", where we have bolded the newline characters.  After deletion, the <i>implicit</i> newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>source</code> is in the range <code>[1, 100]</code>.</li>\r\n<li>The length of <code>source[i]</code> is in the range <code>[0, 80]</code>.</li>\r\n<li>Every open block comment is eventually closed.</li>\r\n<li>There are no single-quote, double-quote, or control characters in the source code.</li>\r\n</p>",
    "code": "var removeComments = function(source) {\n    var code = source.join(\"\\n\");\n    var i = 0;\n    var output = [];\n\n    while (i < code.length) {\n        if (code[i] === \"/\" && code[i + 1] === \"*\") {\n            i += 2;\n            while (i < code.length && (code[i] !== \"*\" || code[i + 1] !== \"/\")) {\n                i++;\n            }\n            i += 2;\n        } else if (code[i] === \"/\" && code[i + 1] === \"/\") {\n            i += 2;\n            while (i < code.length && code[i] !== \"\\n\") {\n                i++;\n            }\n        } else {\n            output.push(code[i++]);\n        }\n    }\n\n    return output.join(\"\").split(\"\\n\").filter(x => x.length);\n};",
    "lang": "javascript"
  },
  {
    "title": "Split Linked List in Parts",
    "titleSlug": "split-linked-list-in-parts",
    "status": "ac",
    "content": "<p>Given a (singly) linked list with head node <code>root</code>, write a function to split the linked list into <code>k</code> consecutive linked list \"parts\".\r\n</p><p>\r\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.\r\n</p><p>\r\nThe parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.\r\n</p><p>\r\nReturn a List of ListNode's representing the linked list parts that are formed.\r\n</p>\r\n\r\nExamples\r\n1->2->3->4, k = 5 // 5 equal parts\r\n[ [1], \r\n[2],\r\n[3],\r\n[4],\r\nnull ]\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-line\">\r\n<b>Input:</b> \r\nroot = [1, 2, 3], k = 5\r\n<b>Output:</b> [[1],[2],[3],[],[]]\r\n<b>Explanation:</b>\r\nThe input and each element of the output are ListNodes, not arrays.\r\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\r\nThe first element output[0] has output[0].val = 1, output[0].next = null.\r\nThe last element output[4] is null, but it's string representation as a ListNode is [].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\r\n<b>Output:</b> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\r\n<b>Explanation:</b>\r\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>root</code> will be in the range <code>[0, 1000]</code>.</li>\r\n<li>Each value of a node in the input will be an integer in the range <code>[0, 999]</code>.</li>\r\n<li><code>k</code> will be an integer in the range <code>[1, 50]</code>.</li>\r\n</p>",
    "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} root\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function(root, k) {\n    let len = 0;\n    let cur = root;\n    while(cur){\n        len++;\n        cur = cur.next;\n    }\n    \n    const lenk = Math.floor(len/k);\n    let extra = len%k;\n    \n    const ans = [];\n    cur = root;\n    let num = 0;\n    let prev;\n    \n    ans.push(root)\n    while(cur){\n        const head = cur;\n        const len2b = lenk + (extra ? 1 : 0);\n        if(num === len2b){\n            ans.push(head);\n            num = 0;\n            if(extra) extra--;\n            prev.next = null;\n        }\n        prev = cur;\n        cur = cur.next;\n        num++;\n    }\n    \n    while(ans.length < k){\n        ans.push(null);\n    }\n    \n    return ans;\n};",
    "lang": "javascript"
  },
  {
    "title": "Design HashSet",
    "titleSlug": "design-hashset",
    "status": "ac",
    "content": "<p>Design a HashSet&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>add(value)</code>:&nbsp;Insert a value into the HashSet.&nbsp;</li>\r\n\t<li><code>contains(value)</code> : Return whether the value exists in the HashSet or not.</li>\r\n\t<li><code>remove(value)</code>: Remove a value in&nbsp;the HashSet. If the value does not exist in the HashSet, do nothing.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashSet hashSet = new MyHashSet();\r\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// returns false (not found)\r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns false (already removed)\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashSet library.</li>\r\n</ul>\r\n",
    "code": "/**\n * Initialize your data structure here.\n */\nvar MyHashSet = function() {\n    this.hashset = new Set();\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n    this.hashset.add(key);\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n    this.hashset.delete(key);\n};\n\n/**\n * Returns true if this set contains the specified element \n * @param {number} key\n * @return {boolean}\n */\nMyHashSet.prototype.contains = function(key) {\n    return this.hashset.has(key);\n};\n\n/** \n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */",
    "lang": "javascript"
  },
  {
    "title": "RLE Iterator",
    "titleSlug": "rle-iterator",
    "status": "ac",
    "content": "<p>Write an iterator that iterates through a run-length encoded sequence.</p>\r\n\r\n<p>The iterator is initialized by <code>RLEIterator(int[] A)</code>, where <code>A</code> is a run-length encoding of some&nbsp;sequence.&nbsp; More specifically,&nbsp;for all even <code>i</code>,&nbsp;<code>A[i]</code> tells us the number of times that the non-negative integer value <code>A[i+1]</code> is repeated in the sequence.</p>\r\n\r\n<p>The iterator supports one function:&nbsp;<code>next(int n)</code>, which exhausts the next <code>n</code> elements&nbsp;(<code>n &gt;= 1</code>) and returns the last element exhausted in this way.&nbsp; If there is no element left to exhaust, <code>next</code>&nbsp;returns <code>-1</code> instead.</p>\r\n\r\n<p>For example, we start with <code>A = [3,8,0,9,2,5]</code>, which is a run-length encoding of the sequence <code>[8,8,8,5,5]</code>.&nbsp; This is because the sequence can be read as&nbsp;&quot;three eights, zero nines, two fives&quot;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id=\"example-input-1-2\">[[[3,8,0,9,2,5]],[2],[1],[1],[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,8,8,5,-1]</span>\r\n<strong>Explanation: </strong>\r\nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\r\nThis maps to the sequence [8,8,8,5,5].\r\nRLEIterator.next is then called 4 times:\r\n\r\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\r\n\r\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\r\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\r\n\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>A.length</code>&nbsp;is an even integer.</li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n\t<li>There are at most <code>1000</code> calls to <code>RLEIterator.next(int n)</code> per test case.</li>\r\n\t<li>Each call to&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;will have <code>1 &lt;= n &lt;= 10^9</code>.</li>\r\n</ol>\r\n",
    "code": "/**\n * @param {number[]} A\n */\nvar RLEIterator = function(A) {\n    let E = A;\n    let i = 0, q = 0;\n\n    this.next = function(n) {\n        while(i < E.length){\n            if(q + n > E[i]){\n                n -= E[i] - q;\n                q = 0;\n                i += 2;\n            } else {\n                q += n;\n                return E[i+1];\n            }\n        }\n\n        return -1;\n    };\n}\n/** \n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(A)\n * var param_1 = obj.next(n)\n */",
    "lang": "javascript"
  },
  {
    "title": "Number of Recent Calls",
    "titleSlug": "number-of-recent-calls",
    "status": "ac",
    "content": "<p>Write a class <code>RecentCounter</code> to count recent requests.</p>\r\n\r\n<p>It has only one method:&nbsp;<code>ping(int t)</code>, where t represents some time in milliseconds.</p>\r\n\r\n<p>Return the number of <code>ping</code>s that have been made from 3000 milliseconds ago until now.</p>\r\n\r\n<p>Any ping with time in <code>[t - 3000, t]</code> will count, including the current ping.</p>\r\n\r\n<p>It is guaranteed that every call to <code>ping</code> uses a strictly larger value of&nbsp;<code>t</code> than before.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;RecentCounter&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[],[1],[100],[3001],[3002]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,2,3,3]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Each test case will have at most <code>10000</code> calls to <code>ping</code>.</li>\r\n\t<li>Each test case will call&nbsp;<code>ping</code> with strictly increasing values of <code>t</code>.</li>\r\n\t<li>Each call to ping will have <code>1 &lt;= t &lt;= 10^9</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>",
    "code": "\nvar RecentCounter = function() {\n    this.head = this.tail = null;\n    this.qt = 0;\n};\n\n/** \n * @param {number} t\n * @return {number}\n */\nRecentCounter.prototype.ping = function(t) {\n    if(!this.head){\n        this.head = this.tail = {t, next: null};\n        this.qt = 1;\n    } else {\n        this.tail.next = {t, next: null};\n        this.tail = this.tail.next;\n        this.qt += 1;\n        \n        while(t - this.head.t > 3000){\n            this.head = this.head.next;\n            this.qt -= 1;\n        }\n    }\n    return this.qt;\n};\n\n/** \n * Your RecentCounter object will be instantiated and called as such:\n * var obj = new RecentCounter()\n * var param_1 = obj.ping(t)\n */",
    "lang": "javascript"
  },
  {
    "title": "Rotting Oranges",
    "titleSlug": "rotting-oranges",
    "status": "ac",
    "content": "<p>In a given grid, each cell can have one of three&nbsp;values:</p>\r\n\r\n<ul>\r\n\t<li>the value <code>0</code> representing an empty cell;</li>\r\n\t<li>the value <code>1</code> representing a fresh orange;</li>\r\n\t<li>the value <code>2</code> representing a rotten orange.</li>\r\n</ul>\r\n\r\n<p>Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.</p>\r\n\r\n<p>Return the minimum number of minutes that must elapse until no cell has a fresh orange.&nbsp; If this is impossible, return <code>-1</code> instead.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/16/oranges.png\" style=\"width: 712px; height: 150px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2,1,1],[1,1,0],[0,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[2,1,1],[0,1,1],[1,0,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong> Since there are already no fresh oranges at minute 0, the answer is just 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length &lt;= 10</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>\r\n\t<li><code>grid[i][j]</code> is only <code>0</code>, <code>1</code>, or <code>2</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
    "code": "\n\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar orangesRotting = function(grid) {\n    const flatten = (a) => a.reduce((p, c) => p.concat(c));\n    const by2 = (flat, idx, wth) => {\n        return flat[idx-1] === 2 || flat[idx+1] === 2 || flat[idx-wth] === 2 || flat[idx+wth] === 2;\n    }\n    \n    const h = grid.length, w = grid[0].length;\n    let loop = h*w;\n    let days = 0, tmp = 0;\n    \n    while(loop){\n        const flat = flatten(grid.map((a) => a.concat([0])));\n        for(let i = 0; i < h; i++){\n            for(let j = 0; j < w; j++){\n                if(grid[i][j] === 1 && by2(flat, (w+1)*i+j, w+1)){\n                    tmp = tmp | 1;\n                    grid[i][j] = 2;\n                    console.log('tada', i, j);\n                }\n            }\n        }\n        if(tmp){\n            days += tmp;\n            console.log('tmp', tmp);\n        } else {\n            console.log('break');\n            break;\n        }\n        tmp = 0;\n        loop -= 1;\n    }\n    \n    if(flatten(grid).includes(1)){\n        return -1;\n    } else {\n        return days;\n    }\n};",
    "lang": "javascript"
  },
  {
    "title": "Minimum Number of K Consecutive Bit Flips",
    "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
    "status": "ac",
    "content": "<p>In an array <code>A</code> containing only 0s and 1s, a <i><code>K</code>-bit flip&nbsp;</i>consists of choosing a (contiguous) subarray of length <code>K</code> and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.</p>\r\n\r\n<p>Return the minimum number of <code>K</code>-bit flips required so that there is no 0 in the array.&nbsp; If it is not possible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[0,1,0]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>Flip A[0], then flip A[2].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,1,0]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation:</strong>&nbsp;No matter how we flip subarrays of size 2, we can&#39;t make the array become [1,1,1].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[0,0,0,1,0,1,1,0]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation:</strong>\r\nFlip A[0],A[1],A[2]:&nbsp;A becomes [1,1,1,1,0,1,1,0]\r\nFlip A[4],A[5],A[6]:&nbsp;A becomes [1,1,1,1,1,0,0,0]\r\nFlip A[5],A[6],A[7]:&nbsp;A becomes [1,1,1,1,1,1,1,1]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\r\n</ol>",
    "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar minKBitFlips = function(A, K) {\n    const len = A.length;\n    const a = Array(len).fill(0);\n    let ans = 0, flip = 0;\n    \n    for(let i = 0; i < len; i++){\n        flip ^= a[i];\n        if(A[i] === flip){\n            ans++;\n            if(i + K > len) return -1;\n            flip ^= 1;\n            if(i + K < len) a[i+K] ^= 1;\n        }\n    }\n    \n    return ans;\n};",
    "lang": "javascript"
  },
  {
    "title": "Remove All Adjacent Duplicates In String",
    "titleSlug": "remove-all-adjacent-duplicates-in-string",
    "status": "ac",
    "content": "<p>Given a string <code>S</code> of lowercase letters, a <em>duplicate removal</em> consists of choosing two adjacent and equal letters, and removing&nbsp;them.</p>\r\n\r\n<p>We repeatedly make duplicate removals on S until we no longer can.</p>\r\n\r\n<p>Return the final string after all such duplicate removals have been made.&nbsp; It is guaranteed the answer is unique.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abbaca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;ca&quot;</span>\r\n<strong>Explanation: </strong>\r\nFor example, in &quot;abbaca&quot; we could remove &quot;bb&quot; since the letters are adjacent and equal, and this is the only possible move.&nbsp; The result of this move is that the string is &quot;aaca&quot;, of which only &quot;aa&quot; is possible, so the final string is &quot;ca&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\r\n\t<li><code>S</code> consists only of English lowercase letters.</li>\r\n</ol>",
    "code": "/**\n * @param {string} S\n * @return {string}\n */\nvar removeDuplicates = function(s) {\n    const stack = [];\n    \n    for(let i = 0; i < s.length; i++){\n        if(stack[stack.length-1] === s[i]){\n            stack.pop();\n        } else {\n            stack.push(s[i]);\n        }\n    }\n    \n    return stack.join('');\n};",
    "lang": "javascript"
  },
  {
    "title": "Unique Number of Occurrences",
    "titleSlug": "unique-number-of-occurrences",
    "status": "ac",
    "content": "<p>Given an array of integers <code>arr</code>,&nbsp;write a function that returns <code>true</code> if and only if the number of occurrences of each value in the array is unique.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,2,1,1,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-3,0,1,-3,1,1,1,-3,10,0]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n",
    "code": "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar uniqueOccurrences = function(arr) {\n    const m = new Map();\n    arr.forEach((e) => m.set(e, m.get(e)? m.get(e) + 1 : 1));\n    return m.size === new Set([...m.values()]).size;\n};",
    "lang": "javascript"
  },
  {
    "title": "Count Servers that Communicate",
    "titleSlug": "count-servers-that-communicate",
    "status": "ac",
    "content": "<p>You are given a map of a server center, represented as a <code>m * n</code> integer matrix&nbsp;<code>grid</code>, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.<br />\n<br />\nReturn the number of servers&nbsp;that communicate with any other server.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-6.jpg\" style=\"width: 202px; height: 203px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0],[0,1]]\n<strong>Output:</strong> 0\n<b>Explanation:</b>&nbsp;No servers can communicate with others.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/13/untitled-diagram-4.jpg\" style=\"width: 203px; height: 203px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0],[1,1]]\n<strong>Output:</strong> 3\n<b>Explanation:</b>&nbsp;All three servers can communicate with at least one other server.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-1-3.jpg\" style=\"width: 443px; height: 443px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n<strong>Output:</strong> 4\n<b>Explanation:</b>&nbsp;The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can&#39;t communicate with any other server.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 250</code></li>\n\t<li><code>1 &lt;= n &lt;= 250</code></li>\n\t<li><code>grid[i][j] == 0 or 1</code></li>\n</ul>\n",
    "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar countServers = function(grid) {\n    const rm = new Map(), cm = new Map();\n    \n    for(let r = 0; r < grid.length; r++){\n        for(let c = 0; c < grid[r].length; c++){\n            if(grid[r][c]){\n                rm.set(r, rm.get(r) ? rm.get(r) + 1 : 1)\n                cm.set(c, cm.get(c) ? cm.get(c) + 1 : 1)\n            }\n        }\n    }\n    \n    let rst = 0;\n    \n    for(let r = 0; r < grid.length; r++){\n        for(let c = 0; c < grid[r].length; c++){\n            if(grid[r][c] && (rm.get(r) > 1 || cm.get(c) > 1)){\n                rst++;\n            }\n        }\n    }\n    \n    return rst;\n};",
    "lang": "javascript"
  },
  {
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "titleSlug": "subtract-the-product-and-sum-of-digits-of-an-integer",
    "status": "ac",
    "content": "Given an integer number <code>n</code>, return the difference between the product of its digits and the sum of its digits.\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 234\n<strong>Output:</strong> 15 \n<b>Explanation:</b> \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4421\n<strong>Output:</strong> 21\n<b>Explanation: \n</b>Product of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10^5</code></li>\n</ul>\n",
    "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar subtractProductAndSum = function(n) {\n    const arr = String(n).split('').map((e) => Number(e));\n    const pro = arr.reduce((p, c) => p*c, 1);\n    const sum = arr.reduce((p, c) => p+c, 0);\n    return pro - sum;\n};",
    "lang": "javascript"
  },
  {
    "title": "Find the Smallest Divisor Given a Threshold",
    "titleSlug": "find-the-smallest-divisor-given-a-threshold",
    "status": "ac",
    "content": "<p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer divisor and&nbsp;divide&nbsp;all the array by it and sum the result of the division. Find the <strong>smallest</strong> divisor such that the result mentioned above is less than&nbsp;or equal to <code>threshold</code>.</p>\r\n\r\n<p>Each&nbsp;result of&nbsp;division is rounded&nbsp;to the nearest integer greater than or equal to that element.&nbsp;(For example: 7/3 = 3 and 10/2 = 5).</p>\r\n\r\n<p>It is guaranteed that there will be an answer.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,2,5,9], threshold = 6\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> We can get a sum to 17 (1+2+5+9) if the divisor is 1. \r\nIf the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [2,3,5,7,11], threshold = 11\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [19], threshold = 5\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li>\r\n\t<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>\r\n\t<li><code>nums.length &lt;=&nbsp;threshold &lt;= 10^6</code></li>\r\n</ul>",
    "code": "/**\n * @param {number[]} nums\n * @param {number} threshold\n * @return {number}\n */\nvar smallestDivisor = function(nums, threshold) {\n    function qsum(arr, q){\n        return arr.map((e) => Math.ceil(e/q)).reduce((a, b) => a + b, 0);\n    }\n          \n    let left = 1, right = 1e6;\n    while (left < right) {\n        let m = Math.floor((left + right) / 2);\n        if (qsum(nums, m) > threshold)\n            left = m + 1;\n        else\n            right = m;\n    }\n    return left;\n};",
    "lang": "javascript"
  },
  {
    "title": "Find N Unique Integers Sum up to Zero",
    "titleSlug": "find-n-unique-integers-sum-up-to-zero",
    "status": "ac",
    "content": "<p>Given an integer <code>n</code>, return <strong>any</strong> array containing <code>n</code> <strong>unique</strong>&nbsp;integers such that they add up to 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 5\r\n<strong>Output:</strong> [-7,-1,1,3,4]\r\n<strong>Explanation:</strong> These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 3\r\n<strong>Output:</strong> [-1,0,1]\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 1\r\n<strong>Output:</strong> [0]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\r\n</ul>",
    "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar sumZero = function(n) {\n    const arr = [];\n    let sum = 0;\n    for(let i = 1; i < n; i++){\n        arr.push(i);\n        sum += i;\n    }\n    arr.push(-sum);\n    \n    return arr;\n};",
    "lang": "javascript"
  },
  {
    "title": "Minimum Flips to Make a OR b Equal to c",
    "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c",
    "status": "ac",
    "content": "<p>Given 3 positives numbers <code>a</code>, <code>b</code> and <code>c</code>. Return the minimum flips required in some bits of <code>a</code> and <code>b</code> to make (&nbsp;<code>a</code> OR <code>b</code> == <code>c</code>&nbsp;). (bitwise OR operation).<br />\r\nFlip operation&nbsp;consists of change&nbsp;<strong>any</strong>&nbsp;single bit 1 to 0 or change the bit 0 to 1&nbsp;in their binary representation.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png\" style=\"width: 260px; height: 87px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = 2, b = 6, c = 5\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong>After flips a = 1 , b = 4 , c = 5 such that (<code>a</code> OR <code>b</code> == <code>c</code>)</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = 4, b = 2, c = 7\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = 1, b = 2, c = 3\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= a &lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= b&nbsp;&lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= c&nbsp;&lt;= 10^9</code></li>\r\n</ul>",
    "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar minFlips = function(a, b, c) {\n    let sa = a.toString(2);\n    let sb = b.toString(2);\n    let sc = c.toString(2);\n    \n    const max = Math.max(sa.length, sb.length, sc.length);\n    sa = sa.padStart(max, '0');\n    sb = sb.padStart(max, '0');\n    sc = sc.padStart(max, '0');\n    \n    let flips = 0;\n    for(let i = 0; i < max; i++){\n        flips += (Number(sc[i]) ? (1 - (sa[i] | sb[i])) : (Number(sa[i]) + Number(sb[i])));\n    }\n    \n    return flips;\n};",
    "lang": "javascript"
  },
  {
    "title": "Combine Two Tables",
    "titleSlug": "combine-two-tables",
    "status": "ac",
    "content": "<p>Table: <code>Person</code></p>\r\n\r\n<pre>\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| PersonId    | int     |\r\n| FirstName   | varchar |\r\n| LastName    | varchar |\r\n+-------------+---------+\r\nPersonId is the primary key column for this table.\r\n</pre>\r\n\r\n<p>Table: <code>Address</code></p>\r\n\r\n<pre>\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| AddressId   | int     |\r\n| PersonId    | int     |\r\n| City        | varchar |\r\n| State       | varchar |\r\n+-------------+---------+\r\nAddressId is the primary key column for this table.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p>\r\n\r\n<pre>\r\nFirstName, LastName, City, State\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nselect FirstName, LastName, City, State\nfrom Person\nleft join Address on Person.PersonId = Address.PersonId;",
    "lang": "mysql"
  },
  {
    "title": "Second Highest Salary",
    "titleSlug": "second-highest-salary",
    "status": "ac",
    "content": "<p>Write a SQL query to get the second highest salary from the <code>Employee</code> table.</p>\r\n\r\n<pre>\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n</pre>\r\n\r\n<p>For example, given the above Employee table, the query should return <code>200</code> as the second highest salary. If there is no second highest salary, then the query should return <code>null</code>.</p>\r\n\r\n<pre>\r\n+---------------------+\r\n| SecondHighestSalary |\r\n+---------------------+\r\n| 200                 |\r\n+---------------------+\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nselect (\n    select distinct Salary \n    from Employee \n    order by Salary desc\n    limit 1\n    offset 1\n) as SecondHighestSalary;",
    "lang": "mysql"
  },
  {
    "title": "Nth Highest Salary",
    "titleSlug": "nth-highest-salary",
    "status": "ac",
    "content": "<p>Write a SQL query to get the <em>n</em><sup>th</sup> highest salary from the <code>Employee</code> table.</p>\r\n\r\n<pre>\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n</pre>\r\n\r\n<p>For example, given the above Employee table, the <em>n</em><sup>th</sup> highest salary where <em>n</em> = 2 is <code>200</code>. If there is no <em>n</em><sup>th</sup> highest salary, then the query should return <code>null</code>.</p>\r\n\r\n<pre>\r\n+------------------------+\r\n| getNthHighestSalary(2) |\r\n+------------------------+\r\n| 200                    |\r\n+------------------------+\r\n</pre>\r\n",
    "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  DECLARE M INT;\n  SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      select distinct Salary from Employee\n      order by Salary desc\n      limit M, 1\n  );\nEND",
    "lang": "mysql"
  },
  {
    "title": "Rank Scores",
    "titleSlug": "rank-scores",
    "status": "ac",
    "content": "<p>Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &quot;holes&quot; between ranks.</p>\r\n\r\n<pre>\r\n+----+-------+\r\n| Id | Score |\r\n+----+-------+\r\n| 1  | 3.50  |\r\n| 2  | 3.65  |\r\n| 3  | 4.00  |\r\n| 4  | 3.85  |\r\n| 5  | 4.00  |\r\n| 6  | 3.65  |\r\n+----+-------+\r\n</pre>\r\n\r\n<p>For example, given the above <code>Scores</code> table, your query should generate the following report (order by highest score):</p>\r\n\r\n<pre>\r\n+-------+------+\r\n| Score | Rank |\r\n+-------+------+\r\n| 4.00  | 1    |\r\n| 4.00  | 1    |\r\n| 3.85  | 2    |\r\n|&nbsp;3.65  | 3    |\r\n| 3.65  | 3    |\r\n| 3.50  | 4    |\r\n+-------+------+\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nselect Score,\n    (select count(distinct Score) from Scores where Score >= s.Score) as Rank\nfrom Scores s\norder by Score desc;",
    "lang": "mysql"
  },
  {
    "title": "Consecutive Numbers",
    "titleSlug": "consecutive-numbers",
    "status": "ac",
    "content": "<p>Write a SQL query to find all numbers that appear at least three times consecutively.</p>\r\n\r\n<pre>\r\n+----+-----+\r\n| Id | Num |\r\n+----+-----+\r\n| 1  |  1  |\r\n| 2  |  1  |\r\n| 3  |  1  |\r\n| 4  |  2  |\r\n| 5  |  1  |\r\n| 6  |  2  |\r\n| 7  |  2  |\r\n+----+-----+\r\n</pre>\r\n\r\n<p>For example, given the above <code>Logs</code> table, <code>1</code> is the only number that appears consecutively for at least three times.</p>\r\n\r\n<pre>\r\n+-----------------+\r\n| ConsecutiveNums |\r\n+-----------------+\r\n| 1               |\r\n+-----------------+\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nSELECT DISTINCT\n    l1.Num AS ConsecutiveNums\nFROM\n    Logs l1,\n    Logs l2,\n    Logs l3\nWHERE\n    l1.Id = l2.Id - 1\n    AND l2.Id = l3.Id - 1\n    AND l1.Num = l2.Num\n    AND l2.Num = l3.Num\n;",
    "lang": "mysql"
  },
  {
    "title": "Employees Earning More Than Their Managers",
    "titleSlug": "employees-earning-more-than-their-managers",
    "status": "ac",
    "content": "<p>The <code>Employee</code> table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>\r\n\r\n<pre>\r\n+----+-------+--------+-----------+\r\n| Id | Name  | Salary | ManagerId |\r\n+----+-------+--------+-----------+\r\n| 1  | Joe   | 70000  | 3         |\r\n| 2  | Henry | 80000  | 4         |\r\n| 3  | Sam   | 60000  | NULL      |\r\n| 4  | Max   | 90000  | NULL      |\r\n+----+-------+--------+-----------+\r\n</pre>\r\n\r\n<p>Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p>\r\n\r\n<pre>\r\n+----------+\r\n| Employee |\r\n+----------+\r\n| Joe      |\r\n+----------+\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nselect e.Name as Employee\nfrom Employee e\njoin Employee m on e.ManagerId = m.Id\nwhere e.Salary > m.Salary;",
    "lang": "mysql"
  },
  {
    "title": "Duplicate Emails",
    "titleSlug": "duplicate-emails",
    "status": "ac",
    "content": "<p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>\r\n\r\n<pre>\r\n+----+---------+\r\n| Id | Email   |\r\n+----+---------+\r\n| 1  | a@b.com |\r\n| 2  | c@d.com |\r\n| 3  | a@b.com |\r\n+----+---------+\r\n</pre>\r\n\r\n<p>For example, your query should return the following for the above table:</p>\r\n\r\n<pre>\r\n+---------+\r\n| Email   |\r\n+---------+\r\n| a@b.com |\r\n+---------+\r\n</pre>\r\n\r\n<p><strong>Note</strong>: All emails are in lowercase.</p>\r\n",
    "code": "# Write your MySQL query statement below\nselect Email\nfrom (\n    select Email, count(Id) as Count\n    from Person\n    group by Email\n) as EmailCount\nwhere EmailCount.Count > 1;",
    "lang": "mysql"
  },
  {
    "title": "Customers Who Never Order",
    "titleSlug": "customers-who-never-order",
    "status": "ac",
    "content": "<p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>\r\n\r\n<p>Table: <code>Customers</code>.</p>\r\n\r\n<pre>\r\n+----+-------+\r\n| Id | Name  |\r\n+----+-------+\r\n| 1  | Joe   |\r\n| 2  | Henry |\r\n| 3  | Sam   |\r\n| 4  | Max   |\r\n+----+-------+\r\n</pre>\r\n\r\n<p>Table: <code>Orders</code>.</p>\r\n\r\n<pre>\r\n+----+------------+\r\n| Id | CustomerId |\r\n+----+------------+\r\n| 1  | 3          |\r\n| 2  | 1          |\r\n+----+------------+\r\n</pre>\r\n\r\n<p>Using the above tables as example, return the following:</p>\r\n\r\n<pre>\r\n+-----------+\r\n| Customers |\r\n+-----------+\r\n| Henry     |\r\n| Max       |\r\n+-----------+\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nselect c.Name as Customers\nfrom Customers c\nwhere 0 = (\n    select count(*) \n    from Orders o\n    where o.CustomerId = c.Id\n)",
    "lang": "mysql"
  },
  {
    "title": "Department Highest Salary",
    "titleSlug": "department-highest-salary",
    "status": "ac",
    "content": "<p>The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p>\r\n\r\n<pre>\r\n+----+-------+--------+--------------+\r\n| Id | Name  | Salary | DepartmentId |\r\n+----+-------+--------+--------------+\r\n| 1  | Joe   | 70000  | 1            |\r\n| 2 &nbsp;| Jim &nbsp; | 90000 &nbsp;| 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|\r\n| 3  | Henry | 80000  | 2            |\r\n| 4  | Sam   | 60000  | 2            |\r\n| 5  | Max   | 90000  | 1            |\r\n+----+-------+--------+--------------+\r\n</pre>\r\n\r\n<p>The <code>Department</code> table holds all departments of the company.</p>\r\n\r\n<pre>\r\n+----+----------+\r\n| Id | Name     |\r\n+----+----------+\r\n| 1  | IT       |\r\n| 2  | Sales    |\r\n+----+----------+\r\n</pre>\r\n\r\n<p>Write a SQL query to find employees who have the highest salary in each of the departments.&nbsp;For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>\r\n\r\n<pre>\r\n+------------+----------+--------+\r\n| Department | Employee | Salary |\r\n+------------+----------+--------+\r\n| IT         | Max      | 90000  |\r\n| IT &nbsp; &nbsp; &nbsp; &nbsp; | Jim &nbsp; &nbsp; &nbsp;| 90000 &nbsp;|\r\n| Sales      | Henry    | 80000  |\r\n+------------+----------+--------+\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>Max and Jim both have&nbsp;the highest salary in the IT department and Henry has the highest salary in the Sales department.</p>\r\n",
    "code": "# Write your MySQL query statement below\nselect \n    d.Name as Department,\n    e.Name as Employee,\n    e.Salary as Salary\nfrom Department d\njoin Employee e on d.Id = e.DepartmentId\nwhere (e.DepartmentId, e.Salary) in (\n    select DepartmentId, max(Salary) from Employee group by DepartmentId\n)",
    "lang": "mysql"
  },
  {
    "title": "Department Top Three Salaries",
    "titleSlug": "department-top-three-salaries",
    "status": "ac",
    "content": "<p>The <code>Employee</code> table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p>\r\n\r\n<pre>\r\n+----+-------+--------+--------------+\r\n| Id | Name  | Salary | DepartmentId |\r\n+----+-------+--------+--------------+\r\n| 1  | Joe   | 85000  | 1            |\r\n| 2  | Henry | 80000  | 2            |\r\n| 3  | Sam   | 60000  | 2            |\r\n| 4  | Max   | 90000  | 1            |\r\n| 5  | Janet | 69000  | 1            |\r\n| 6  | Randy | 85000  | 1            |\r\n| 7  | Will  | 70000  | 1            |\r\n+----+-------+--------+--------------+\r\n</pre>\r\n\r\n<p>The <code>Department</code> table holds all departments of the company.</p>\r\n\r\n<pre>\r\n+----+----------+\r\n| Id | Name     |\r\n+----+----------+\r\n| 1  | IT       |\r\n| 2  | Sales    |\r\n+----+----------+\r\n</pre>\r\n\r\n<p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>\r\n\r\n<pre>\r\n+------------+----------+--------+\r\n| Department | Employee | Salary |\r\n+------------+----------+--------+\r\n| IT         | Max      | 90000  |\r\n| IT         | Randy    | 85000  |\r\n| IT         | Joe      | 85000  |\r\n| IT         | Will     | 70000  |\r\n| Sales      | Henry    | 80000  |\r\n| Sales      | Sam      | 60000  |\r\n+------------+----------+--------+\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.</p>\r\n",
    "code": "# Write your MySQL query statement below\nselect \n    d.Name as Department,\n    e.Name as Employee,\n    e.Salary as Salary\nfrom Department d\njoin Employee e on d.Id = e.DepartmentId\nwhere 3 > (\n    select count(distinct Salary)\n    from Employee e2\n    where e2.DepartmentId = e.DepartmentId\n    and e2.Salary > e.Salary\n)",
    "lang": "mysql"
  },
  {
    "title": "Delete Duplicate Emails",
    "titleSlug": "delete-duplicate-emails",
    "status": "ac",
    "content": "<p>Write a SQL query to <strong>delete</strong> all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its <i>smallest</i> <b>Id</b>.</p>\r\n\r\n<pre>\r\n+----+------------------+\r\n| Id | Email            |\r\n+----+------------------+\r\n| 1  | john@example.com |\r\n| 2  | bob@example.com  |\r\n| 3  | john@example.com |\r\n+----+------------------+\r\nId is the primary key column for this table.\r\n</pre>\r\n\r\n<p>For example, after running your query, the above <code>Person</code> table should have the following rows:</p>\r\n\r\n<pre>\r\n+----+------------------+\r\n| Id | Email            |\r\n+----+------------------+\r\n| 1  | john@example.com |\r\n| 2  | bob@example.com  |\r\n+----+------------------+\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your output is the whole <code>Person</code>&nbsp;table after executing your sql. Use <code>delete</code> statement.</p>\r\n",
    "code": "# Write your MySQL query statement below\ndelete p1 from Person p1, Person p2\nwhere  p2.Email = p1.Email\nand p2.Id < p1.Id",
    "lang": "mysql"
  },
  {
    "title": "Rising Temperature",
    "titleSlug": "rising-temperature",
    "status": "ac",
    "content": "<p>Given a <code>Weather</code> table, write a SQL query to find all dates&#39; Ids with higher temperature compared to its previous (yesterday&#39;s) dates.</p>\r\n\r\n<pre>\r\n+---------+------------------+------------------+\r\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\r\n+---------+------------------+------------------+\r\n|       1 |       2015-01-01 |               10 |\r\n|       2 |       2015-01-02 |               25 |\r\n|       3 |       2015-01-03 |               20 |\r\n|       4 |       2015-01-04 |               30 |\r\n+---------+------------------+------------------+\r\n</pre>\r\n\r\n<p>For example, return the following Ids for the above <code>Weather</code> table:</p>\r\n\r\n<pre>\r\n+----+\r\n| Id |\r\n+----+\r\n|  2 |\r\n|  4 |\r\n+----+\r\n</pre>\r\n",
    "code": "# Write your MySQL query statement below\nselect w1.Id as Id\nfrom Weather w1\njoin Weather w2 \non datediff(w1.RecordDate, w2.RecordDate) = 1\nand w1.Temperature > w2.Temperature;",
    "lang": "mysql"
  },
  {
    "title": "Trips and Users",
    "titleSlug": "trips-and-users",
    "status": "ac",
    "content": "<p>The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the <code>Users</code> table. Status is an ENUM type of (&lsquo;completed&rsquo;, &lsquo;cancelled_by_driver&rsquo;, &lsquo;cancelled_by_client&rsquo;).</p>\n\n<pre>\n+----+-----------+-----------+---------+--------------------+----------+\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\n+----+-----------+-----------+---------+--------------------+----------+\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\n+----+-----------+-----------+---------+--------------------+----------+\n</pre>\n\n<p>The <code>Users</code> table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (&lsquo;client&rsquo;, &lsquo;driver&rsquo;, &lsquo;partner&rsquo;).</p>\n\n<pre>\n+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+\n</pre>\n\n<p>Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned)&nbsp;between <strong>Oct 1, 2013</strong> and <strong>Oct 3, 2013</strong>. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests&nbsp;made by unbanned users by the total number of requests&nbsp;made by unbanned users.</p>\n\n<p>For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to <em>two</em> decimal places.</p>\n\n<pre>\n+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+\n</pre>\n\n<p><strong>Credits:</strong><br />\nSpecial thanks to <a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a> for contributing this question, writing the problem description and adding part of the test cases.</p>\n",
    "code": "# Write your MySQL query statement below\nselect \n    Request_at as Day,\n    round((count(IF(Trips.status != 'completed',TRUE,null))/count(*)),2) as 'Cancellation Rate'\nfrom Trips\nwhere Trips.Client_Id in (Select Users_Id from Users where Banned='No') \nand Trips.Driver_Id in (Select Users_Id from Users where Banned='No')\nand Trips.Request_at between '2013-10-01' and '2013-10-03'\ngroup by Request_at;",
    "lang": "mysql"
  },
  {
    "title": "Big Countries",
    "titleSlug": "big-countries",
    "status": "ac",
    "content": "<p>There is a table <code>World</code></p>\r\n\r\n<pre>\r\n+-----------------+------------+------------+--------------+---------------+\r\n| name            | continent  | area       | population   | gdp           |\r\n+-----------------+------------+------------+--------------+---------------+\r\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\r\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\r\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\r\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\r\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\r\n+-----------------+------------+------------+--------------+---------------+\r\n</pre>\r\n\r\n<p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p>\r\n\r\n<p>Write a SQL solution to output big countries&#39; name, population and area.</p>\r\n\r\n<p>For example, according to the above table, we should output:</p>\r\n\r\n<pre>\r\n+--------------+-------------+--------------+\r\n| name         | population  | area         |\r\n+--------------+-------------+--------------+\r\n| Afghanistan  | 25500100    | 652230       |\r\n| Algeria      | 37100000    | 2381741      |\r\n+--------------+-------------+--------------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
    "code": "# Write your MySQL query statement below\nselect name, population, area\nfrom World\nwhere area > 3000000\nor population > 25000000;",
    "lang": "mysql"
  },
  {
    "title": "Classes More Than 5 Students",
    "titleSlug": "classes-more-than-5-students",
    "status": "ac",
    "content": "<p>There is a table <code>courses</code> with columns: <b>student</b> and <b>class</b></p>\r\n\r\n<p>Please list out all classes which have more than or equal to 5 students.</p>\r\n\r\n<p>For example, the table:</p>\r\n\r\n<pre>\r\n+---------+------------+\r\n| student | class      |\r\n+---------+------------+\r\n| A       | Math       |\r\n| B       | English    |\r\n| C       | Math       |\r\n| D       | Biology    |\r\n| E       | Math       |\r\n| F       | Computer   |\r\n| G       | Math       |\r\n| H       | Math       |\r\n| I       | Math       |\r\n+---------+------------+\r\n</pre>\r\n\r\n<p>Should output:</p>\r\n\r\n<pre>\r\n+---------+\r\n| class   |\r\n+---------+\r\n| Math    |\r\n+---------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe students should not be counted duplicate in each course.</p>\r\n",
    "code": "SELECT\n    class\nFROM\n    courses\nGROUP BY class\nHAVING COUNT(DISTINCT student) >= 5\n;",
    "lang": "mysql"
  },
  {
    "title": "Valid Phone Numbers",
    "titleSlug": "valid-phone-numbers",
    "status": "ac",
    "content": "<p>Given a text file <code>file.txt</code> that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.</p>\r\n\r\n<p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p>\r\n\r\n<p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Assume that <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\n987-123-4567\r\n123 456 7890\r\n(123) 456-7890\r\n</pre>\r\n\r\n<p>Your script should output the following valid phone numbers:</p>\r\n\r\n<pre>\r\n987-123-4567\r\n(123) 456-7890\r\n</pre>\r\n",
    "code": "# Read from the file file.txt and output all valid phone numbers to stdout.\ngrep -P '^(\\d{3}-|\\(\\d{3}\\) )\\d{3}-\\d{4}$' file.txt",
    "lang": "bash"
  },
  {
    "title": "Tenth Line",
    "titleSlug": "tenth-line",
    "status": "ac",
    "content": "<p>Given a text file&nbsp;<code>file.txt</code>, print&nbsp;just the 10th line of the&nbsp;file.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Assume that <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n</pre>\r\n\r\n<p>Your script should output the tenth line, which is:</p>\r\n\r\n<pre>\r\nLine 10\r\n</pre>\r\n\r\n<div class=\"spoilers\"><b>Note:</b><br />\r\n1. If the file contains less than 10 lines, what should you output?<br />\r\n2. There&#39;s at least three different solutions. Try to explore all possibilities.</div>\r\n",
    "code": "# Read from the file file.txt and output the tenth line to stdout.\ntail -n+10 file.txt | head -1",
    "lang": "bash"
  },
  {
    "title": "Print in Order",
    "titleSlug": "print-in-order",
    "status": "ac",
    "content": "<p>Suppose we have a class:</p>\n\n<pre>\npublic class Foo {\n&nbsp; public void first() { print(&quot;first&quot;); }\n&nbsp; public void second() { print(&quot;second&quot;); }\n&nbsp; public void third() { print(&quot;third&quot;); }\n}\n</pre>\n\n<p>The same instance of <code>Foo</code> will be passed to three different threads. Thread A will call <code>first()</code>, thread B will call <code>second()</code>, and thread C will call <code>third()</code>. Design a mechanism and modify the program&nbsp;to ensure that&nbsp;<code>second()</code>&nbsp;is executed after&nbsp;<code>first()</code>, and&nbsp;<code>third()</code> is executed after&nbsp;<code>second()</code>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<b>Input:</b> [1,2,3]\n<b>Output:</b> &quot;firstsecondthird&quot;\n<strong>Explanation:</strong> There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). &quot;firstsecondthird&quot; is the correct output.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<b>Input:</b> [1,3,2]\n<b>Output:</b> &quot;firstsecondthird&quot;\n<strong>Explanation:</strong> The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). &quot;firstsecondthird&quot; is the correct output.</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<p>We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. The input format you see is mainly&nbsp;to ensure our tests&#39; comprehensiveness.</p>\n",
    "code": "import java.util.concurrent.*;\n\nclass Foo {\n\n    Semaphore run2, run3;\n\n    public Foo() {\n        run2 = new Semaphore(0);\n        run3 = new Semaphore(0);\n    }\n\n    public void first(Runnable printFirst) throws InterruptedException {\n        printFirst.run();\n        run2.release();\n    }\n\n    public void second(Runnable printSecond) throws InterruptedException {\n        run2.acquire();\n        printSecond.run();\n        run3.release();\n    }\n\n    public void third(Runnable printThird) throws InterruptedException {\n        run3.acquire(); \n        printThird.run();\n    }\n}",
    "lang": "java"
  },
  {
    "title": "Maximum Subarray",
    "titleSlug": "maximum-subarray",
    "status": "ac",
    "content": "<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [4,-1,2,1] has the largest sum = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,-1,7,8]\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>\n",
    "code": "func MaxInt(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc maxSubArray(nums []int) int {\n    sum := nums[0]\n    max := nums[0]\n    for i:=1;i<len(nums);i++ {\n        sum = MaxInt(sum + nums[i], nums[i])\n        max = MaxInt(sum, max)\n        sum = MaxInt(sum, 0)\n    }\n    return max\n}",
    "lang": "golang"
  }
]