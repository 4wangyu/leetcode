[{"title":"Two Sum","titleSlug":"two-sum","status":"ac","content":"<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\r\n\r\n<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,\r\nreturn [<strong>0</strong>, <strong>1</strong>].\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n  var map = new Map();\n  var len = nums.length;\n  \n  for(var i = 0; i < len; i++){\n      var num = nums[i];\n      var complement = target - num;\n      if(map.has(complement)){\n         return [map.get(complement), i];\n      } else {\n        map.set(num, i);\n      }\n  }\n};","lang":"javascript"},{"title":"Add Two Numbers","titleSlug":"add-two-numbers","status":"ac","content":"<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    var head = new ListNode(0);\n    var tail = head;\n    var carryover = 0;\n    \n    while(l1 != null || l2 != null){\n        var sum = (l1 == null ? 0 : l1.val) \n                  + (l2 == null ? 0 : l2.val) \n                  + carryover;\n        carryover = Math.floor(sum / 10);\n        var nextNode = new ListNode(sum % 10);\n        tail.next = nextNode;\n        tail = tail.next;\n        l1 = l1 ? l1.next : null;\n        l2 = l2 ? l2.next : null;\n    }\n    \n    if(carryover > 0){\n        var nextNode = new ListNode(carryover);\n        tail.next = nextNode;\n    }\n    \n    return head.next;\n};","lang":"javascript"},{"title":"Longest Substring Without Repeating Characters","titleSlug":"longest-substring-without-repeating-characters","status":"ac","content":"<p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abcabcbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation:</strong></span> The answer is <code>&quot;abc&quot;</code>, with the length of 3. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;bbbbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong>T</span>he answer is <code>&quot;b&quot;</code>, with the length of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;pwwkew&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>The answer is <code>&quot;wke&quot;</code>, with the length of 3. \r\n             Note that the answer must be a <b>substring</b>, <code>&quot;pwke&quot;</code> is a <i>subsequence</i> and not a substring.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var len = s.length;\n    var max = 0;\n    var map = new Map();\n    \n    for(var i = 0; i < len; i++){\n        var c = s.charAt(i);\n        while(map.has(c)) map.delete(map.keys().next().value);\n        map.set(c, 1);\n        max = Math.max(max, map.size);\n    }\n    \n    return max;\n};","lang":"javascript"},{"title":"Median of Two Sorted Arrays","titleSlug":"median-of-two-sorted-arrays","status":"ac","content":"<p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p>\r\n\r\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\r\n\r\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong>&nbsp;cannot be both empty.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 3]\r\nnums2 = [2]\r\n\r\nThe median is 2.0\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\nThe median is (2 + 3)/2 = 2.5\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);\n    \n    const x = nums1.length, y = nums2.length;\n    let lo = 0, hi = x;\n    \n    while(lo <= hi) {\n        let partitionX = (lo + hi) / 2 | 0,\n            partitionY = (x + y + 1) / 2 - partitionX | 0;\n        \n        let maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\n        let minRightX = partitionX === x ? Infinity : nums1[partitionX];\n        \n        let maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\n        let minRightY = partitionY === y ? Infinity : nums2[partitionY];\n        \n        if(maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if((x + y) & 1) return Math.max(maxLeftX, maxLeftY);\n            return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n        } else if(maxLeftX > minRightY) {\n            hi = partitionX - 1;\n        } else {\n            lo = partitionX + 1;\n        }\n    }\n};","lang":"javascript"},{"title":"Longest Palindromic Substring","titleSlug":"longest-palindromic-substring","status":"ac","content":"<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;babad&quot;\r\n<strong>Output:</strong> &quot;bab&quot;\r\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;cbbd&quot;\r\n<strong>Output:</strong> &quot;bb&quot;\r\n</pre>\r\n","code":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    var len = s.length;\n    var pal = \"\";\n    \n    var offset = 1;\n    for(var i = 0; i < len; i++){\n        if(i < len - 1 && s.charAt(i) == s.charAt(i+1)){\n            while(i-offset >= 0 && i+1+offset < len \n                  && s.charAt(i-offset) ==  s.charAt(i+1+offset)){\n                offset ++;\n            }\n            var palEven = s.substring(i+1-offset, i+1+offset);\n            pal = pal.length >= palEven.length ? pal : palEven;\n            offset = 1;\n        }\n        \n        while(i-offset >= 0 && i+offset < len \n              && s.charAt(i-offset) ==  s.charAt(i+offset)){\n            offset ++;\n        }\n        var palOdd = s.substring(i+1-offset, i+offset);\n        pal = pal.length >= palOdd.length ? pal : palOdd;\n        offset = 1;\n    }\n    \n    return pal;\n};","lang":"javascript"},{"title":"ZigZag Conversion","titleSlug":"zigzag-conversion","status":"ac","content":"<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\r\n\r\n<pre>\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n</pre>\r\n\r\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\r\n\r\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\r\n\r\n<pre>\r\nstring convert(string s, int numRows);</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\r\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows =&nbsp;4\r\n<strong>Output:</strong>&nbsp;&quot;PINALSIGYAHRPI&quot;\r\n<strong>Explanation:</strong>\r\n\r\nP     I    N\r\nA   L S  I G\r\nY A   H R\r\nP     I</pre>\r\n","code":"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    if(numRows == 1) return s;\n    \n    var getChar = function(str, idx){\n        if(idx < 0 || idx >= str.length) return '';\n        return str.charAt(idx);\n    }\n    \n    var out = '';\n    var len = s.length;\n    for(var i = 0; i < numRows; i++){\n        var pos = 0;\n        while(pos + 2 - numRows <= len){\n            if(i == 0 || i == numRows - 1){\n                out += getChar(s, pos + i);\n            } else {\n                out += getChar(s, pos - i) + getChar(s, pos + i);\n            }\n            pos += 2 * numRows - 2;\n        }\n    }\n    \n    return out;\n};","lang":"javascript"},{"title":"Reverse Integer","titleSlug":"reverse-integer","status":"ac","content":"<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 123\r\n<strong>Output:</strong> 321\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -123\r\n<strong>Output:</strong> -321\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 120\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n","code":"/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(y) {\n    var reverseAbs = function(x){\n        if (x == 0) return '';\n        return x%10 + reverseAbs(Math.floor(x/10));\n    }\n    var limit = 2147483648;\n    var rvsdY = reverseAbs(Math.abs(y));\n    \n    if(rvsdY > limit || y == 0) return 0;\n    return parseInt((y < 0 ? '-' : '') + rvsdY);\n};\n","lang":"javascript"}]