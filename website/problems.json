[{"title":"Two Sum","titleSlug":"two-sum","status":"ac","content":"<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\r\n\r\n<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,\r\nreturn [<strong>0</strong>, <strong>1</strong>].\r\n</pre>","code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n  var map = new Map();\n  var len = nums.length;\n  \n  for(var i = 0; i < len; i++){\n      var num = nums[i];\n      var complement = target - num;\n      if(map.has(complement)){\n         return [map.get(complement), i];\n      } else {\n        map.set(num, i);\n      }\n  }\n};","lang":"javascript"},{"title":"Add Two Numbers","titleSlug":"add-two-numbers","status":"ac","content":"<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    var head = new ListNode(0);\n    var tail = head;\n    var carryover = 0;\n    \n    while(l1 != null || l2 != null){\n        var sum = (l1 == null ? 0 : l1.val) \n                  + (l2 == null ? 0 : l2.val) \n                  + carryover;\n        carryover = Math.floor(sum / 10);\n        var nextNode = new ListNode(sum % 10);\n        tail.next = nextNode;\n        tail = tail.next;\n        l1 = l1 ? l1.next : null;\n        l2 = l2 ? l2.next : null;\n    }\n    \n    if(carryover > 0){\n        var nextNode = new ListNode(carryover);\n        tail.next = nextNode;\n    }\n    \n    return head.next;\n};","lang":"javascript"},{"title":"Longest Substring Without Repeating Characters","titleSlug":"longest-substring-without-repeating-characters","status":"ac","content":"<p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abcabcbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation:</strong></span> The answer is <code>&quot;abc&quot;</code>, with the length of 3. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;bbbbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong>T</span>he answer is <code>&quot;b&quot;</code>, with the length of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;pwwkew&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>The answer is <code>&quot;wke&quot;</code>, with the length of 3. \r\n             Note that the answer must be a <b>substring</b>, <code>&quot;pwke&quot;</code> is a <i>subsequence</i> and not a substring.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var len = s.length;\n    var max = 0;\n    var map = new Map();\n    \n    for(var i = 0; i < len; i++){\n        var c = s.charAt(i);\n        while(map.has(c)) map.delete(map.keys().next().value);\n        map.set(c, 1);\n        max = Math.max(max, map.size);\n    }\n    \n    return max;\n};","lang":"javascript"},{"title":"Median of Two Sorted Arrays","titleSlug":"median-of-two-sorted-arrays","status":"ac","content":"<p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p>\r\n\r\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\r\n\r\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong>&nbsp;cannot be both empty.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 3]\r\nnums2 = [2]\r\n\r\nThe median is 2.0\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\nThe median is (2 + 3)/2 = 2.5\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);\n    \n    const x = nums1.length, y = nums2.length;\n    let lo = 0, hi = x;\n    \n    while(lo <= hi) {\n        let partitionX = (lo + hi) / 2 | 0,\n            partitionY = (x + y + 1) / 2 - partitionX | 0;\n        \n        let maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\n        let minRightX = partitionX === x ? Infinity : nums1[partitionX];\n        \n        let maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\n        let minRightY = partitionY === y ? Infinity : nums2[partitionY];\n        \n        if(maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if((x + y) & 1) return Math.max(maxLeftX, maxLeftY);\n            return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n        } else if(maxLeftX > minRightY) {\n            hi = partitionX - 1;\n        } else {\n            lo = partitionX + 1;\n        }\n    }\n};","lang":"javascript"},{"title":"Longest Palindromic Substring","titleSlug":"longest-palindromic-substring","status":"ac","content":"<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;babad&quot;\r\n<strong>Output:</strong> &quot;bab&quot;\r\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;cbbd&quot;\r\n<strong>Output:</strong> &quot;bb&quot;\r\n</pre>\r\n","code":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    var len = s.length;\n    var pal = \"\";\n    \n    var offset = 1;\n    for(var i = 0; i < len; i++){\n        if(i < len - 1 && s.charAt(i) == s.charAt(i+1)){\n            while(i-offset >= 0 && i+1+offset < len \n                  && s.charAt(i-offset) ==  s.charAt(i+1+offset)){\n                offset ++;\n            }\n            var palEven = s.substring(i+1-offset, i+1+offset);\n            pal = pal.length >= palEven.length ? pal : palEven;\n            offset = 1;\n        }\n        \n        while(i-offset >= 0 && i+offset < len \n              && s.charAt(i-offset) ==  s.charAt(i+offset)){\n            offset ++;\n        }\n        var palOdd = s.substring(i+1-offset, i+offset);\n        pal = pal.length >= palOdd.length ? pal : palOdd;\n        offset = 1;\n    }\n    \n    return pal;\n};","lang":"javascript"},{"title":"ZigZag Conversion","titleSlug":"zigzag-conversion","status":"ac","content":"<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\r\n\r\n<pre>\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n</pre>\r\n\r\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\r\n\r\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\r\n\r\n<pre>\r\nstring convert(string s, int numRows);</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\r\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows =&nbsp;4\r\n<strong>Output:</strong>&nbsp;&quot;PINALSIGYAHRPI&quot;\r\n<strong>Explanation:</strong>\r\n\r\nP     I    N\r\nA   L S  I G\r\nY A   H R\r\nP     I</pre>\r\n","code":"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    if(numRows == 1) return s;\n    \n    var getChar = function(str, idx){\n        if(idx < 0 || idx >= str.length) return '';\n        return str.charAt(idx);\n    }\n    \n    var out = '';\n    var len = s.length;\n    for(var i = 0; i < numRows; i++){\n        var pos = 0;\n        while(pos + 2 - numRows <= len){\n            if(i == 0 || i == numRows - 1){\n                out += getChar(s, pos + i);\n            } else {\n                out += getChar(s, pos - i) + getChar(s, pos + i);\n            }\n            pos += 2 * numRows - 2;\n        }\n    }\n    \n    return out;\n};","lang":"javascript"},{"title":"Reverse Integer","titleSlug":"reverse-integer","status":"ac","content":"<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 123\r\n<strong>Output:</strong> 321\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -123\r\n<strong>Output:</strong> -321\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 120\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n","code":"/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(y) {\n    var reverseAbs = function(x){\n        if (x == 0) return '';\n        return x%10 + reverseAbs(Math.floor(x/10));\n    }\n    var limit = 2147483648;\n    var rvsdY = reverseAbs(Math.abs(y));\n    \n    if(rvsdY > limit || y == 0) return 0;\n    return parseInt((y < 0 ? '-' : '') + rvsdY);\n};\n","lang":"javascript"},{"title":"String to Integer (atoi)","titleSlug":"string-to-integer-atoi","status":"ac","content":"<p>Implement <code><span>atoi</span></code> which&nbsp;converts a string to an integer.</p>\r\n\r\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\r\n\r\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\r\n\r\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\r\n\r\n<p>If no valid conversion could be performed, a zero value is returned.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li>\r\n\t<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. If the numerical value is out of the range of representable values, INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) or INT_MIN (&minus;2<sup>31</sup>) is returned.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;42&quot;\r\n<strong>Output:</strong> 42\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;   -42&quot;\r\n<strong>Output:</strong> -42\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;-&#39;, which is the minus sign.\r\n&nbsp;            Then take as many numerical digits as possible, which gets 42.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;4193 with words&quot;\r\n<strong>Output:</strong> 4193\r\n<strong>Explanation:</strong> Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;words and 987&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;w&#39;, which is not a numerical \r\n&nbsp;            digit or a +/- sign. Therefore no valid conversion could be performed.</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;-91283472332&quot;\r\n<strong>Output:</strong> -2147483648\r\n<strong>Explanation:</strong> The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.\r\n&nbsp;            Thefore INT_MIN (&minus;2<sup>31</sup>) is returned.</pre>\r\n","code":"/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n    const INT_MAX = Math.pow(2, 31) - 1;\n    const INT_MIN = Math.pow(2, 31) * -1;\n    \n    const i = parseInt(str.trim().split(' ')[0]);\n    \n    if(isNaN(i)) return 0;\n    if(i < INT_MIN) return INT_MIN;\n    if(i > INT_MAX) return INT_MAX;\n    return i;\n};","lang":"javascript"},{"title":"Palindrome Number","titleSlug":"palindrome-number","status":"ac","content":"<p>Determine whether an integer is a palindrome. An integer&nbsp;is&nbsp;a&nbsp;palindrome when it&nbsp;reads the same backward as forward.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 121\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -121\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Coud you solve&nbsp;it without converting the integer to a string?</p>\r\n","code":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n//     solution 1\n//     let a = x.toString().split('');\n    \n//     return a.slice(0, Math.ceil(a.length/2)).join('') \n//         == a.slice(a.length - Math.ceil(a.length/2), a.length).reverse().join('');\n    \n    let str = x.toString();\n    function isPal(s) {\n        if([0, 1].includes(s.length))\n            return true;\n        if(s.slice(0,1) != s.slice(s.length-1, s.length))\n            return false;\n        return isPal(s.slice(1,s.length-1));\n    }\n    \n    return isPal(str);\n};","lang":"javascript"},{"title":"Regular Expression Matching","titleSlug":"regular-expression-matching","status":"ac","content":"<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>\n\n<pre>\n&#39;.&#39; Matches any single character.\n&#39;*&#39; Matches zero or more of the preceding element.\n</pre>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;could be empty and contains only lowercase letters <code>a-z</code>.</li>\n\t<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like&nbsp;<code>.</code>&nbsp;or&nbsp;<code>*</code>.</li>\n</ul>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n","code":"/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    return new RegExp('^'+p+'$').test(s);\n};\n","lang":"javascript"},{"title":"Container With Most Water","titleSlug":"container-with-most-water","status":"ac","content":"<p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n&nbsp;</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You may not slant the container and <i>n</i> is at least 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" /></p>\r\n\r\n<p><small>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49. </small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,8,6,2,5,4,8,3,7]\r\n<strong>Output:</strong> 49</pre>","code":"/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    let l = 0, r = height.length - 1, max = 0;\n    \n    while (l < r){\n        let area = Math.min(height[l], height[r]) * (r - l);\n        max = max >= area ? max : area;\n        if(height[l] < height[r]){\n            l++;\n        } else {\n            r--;\n        }\n    }\n    \n    return max;\n};","lang":"javascript"},{"title":"Integer to Roman","titleSlug":"integer-to-roman","status":"ac","content":"<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\r\n\r\n<pre>\r\n<strong>Symbol</strong>       <strong>Value</strong>\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000</pre>\r\n\r\n<p>For example,&nbsp;two is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\r\n\r\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\r\n\r\n<ul>\r\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\r\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\r\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\r\n</ul>\r\n\r\n<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;3\r\n<strong>Output:</strong> &quot;III&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;4\r\n<strong>Output:</strong> &quot;IV&quot;</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;9\r\n<strong>Output:</strong> &quot;IX&quot;</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;58\r\n<strong>Output:</strong> &quot;LVIII&quot;\r\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;1994\r\n<strong>Output:</strong> &quot;MCMXCIV&quot;\r\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.</pre>\r\n","code":"/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    var romanMatrix = [\n      [1000, 'M'],\n      [900, 'CM'],\n      [500, 'D'],\n      [400, 'CD'],\n      [100, 'C'],\n      [90, 'XC'],\n      [50, 'L'],\n      [40, 'XL'],\n      [10, 'X'],\n      [9, 'IX'],\n      [5, 'V'],\n      [4, 'IV'],\n      [1, 'I']\n    ];\n    \n    var rom = '';\n    for (var i = 0; i < romanMatrix.length; i++ ) {\n        rom += romanMatrix[i][1].repeat(Math.floor(num/romanMatrix[i][0]));\n        num = num % romanMatrix[i][0];\n    }\n    \n    return rom;\n};","lang":"javascript"},{"title":"Roman to Integer","titleSlug":"roman-to-integer","status":"ac","content":"<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\r\n\r\n<pre>\r\n<strong>Symbol</strong>       <strong>Value</strong>\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000</pre>\r\n\r\n<p>For example,&nbsp;two is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\r\n\r\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\r\n\r\n<ul>\r\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\r\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\r\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\r\n</ul>\r\n\r\n<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;III&quot;\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;IV&quot;\r\n<strong>Output:</strong> 4</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;IX&quot;\r\n<strong>Output:</strong> 9</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;LVIII&quot;\r\n<strong>Output:</strong> 58\r\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;MCMXCIV&quot;\r\n<strong>Output:</strong> 1994\r\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.</pre>\r\n","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var romanMatrix = [\n      [1000, 'M'],\n      [900, 'CM'],\n      [500, 'D'],\n      [400, 'CD'],\n      [100, 'C'],\n      [90, 'XC'],\n      [50, 'L'],\n      [40, 'XL'],\n      [10, 'X'],\n      [9, 'IX'],\n      [5, 'V'],\n      [4, 'IV'],\n      [1, 'I']\n    ];\n    \n    var num = 0;\n    for (var i = 0; i < romanMatrix.length; i++ ) {\n        while(s.startsWith(romanMatrix[i][1])){\n            num += romanMatrix[i][0];\n            s = s.slice(romanMatrix[i][1].length, s.length);\n        }\n    }\n    \n    return num;\n};","lang":"javascript"},{"title":"Longest Common Prefix","titleSlug":"longest-common-prefix","status":"ac","content":"<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\r\n\r\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\r\n<strong>Output:</strong> &quot;fl&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\r\n<strong>Output:</strong> &quot;&quot;\r\n<strong>Explanation:</strong> There is no common prefix among the input strings.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>All given inputs are in lowercase letters <code>a-z</code>.</p>\r\n","code":"/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    function cmnPrefix(a, b){\n        let i = 0;\n        let p = '';\n        while (i < a.length && i < b.length){\n            if(a[i] === b[i]) {\n                p += a[i];\n                i++;\n            } else {\n                break;\n            }\n        }\n        return p;\n    }\n    \n    function findCmnPrefix(strArr, prefix){\n        if(!strArr.length || !prefix.length)\n            return prefix;\n        return findCmnPrefix(strArr.splice(1, strArr.length), cmnPrefix(prefix, strArr[0]));\n    }\n    \n    if(!strs || !strs.length) return '';\n    return findCmnPrefix(strs.splice(1, strs.length), strs[0]);\n};","lang":"javascript"},{"title":"3Sum","titleSlug":"3sum","status":"ac","content":"<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The solution set must not contain duplicate triplets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [-1, 0, 1, 2, -1, -4],\r\n\r\nA solution set is:\r\n[\r\n  [-1, 0, 1],\r\n  [-1, -1, 2]\r\n]\r\n</pre>","code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n\tvar rtn = [];\n\tif (nums.length < 3) {\n\t\treturn rtn;\n\t}\n\tnums = nums.sort(function(a, b) {\n\t\treturn a - b;\n\t});\n\tfor (var i = 0; i < nums.length - 2; i++) {\n\t\tif (nums[i] > 0) {\n\t\t\treturn rtn;\n\t\t}\n\t\tif (i > 0 && nums[i] == nums[i - 1]) {\n\t\t\tcontinue;\n\t\t}\n\t\tfor (var j = i + 1, k = nums.length - 1; j < k;) {\n\t\t\tif (nums[i] + nums[j] + nums[k] === 0) {\n\t\t\t\trtn.push([nums[i], nums[j], nums[k]]);\n\t\t\t\tj++;\n\t\t\t\tk--;\n\t\t\t\twhile (j < k && nums[j] == nums[j - 1]) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\twhile (j < k && nums[k] == nums[k + 1]) {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t} else if (nums[i] + nums[j] + nums[k] > 0) {\n\t\t\t\tk--;\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn rtn;\n};","lang":"javascript"},{"title":"3Sum Closest","titleSlug":"3sum-closest","status":"ac","content":"<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code>&nbsp;such that the sum is closest to&nbsp;<code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [-1, 2, 1, -4], and target = 1.\r\n\r\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n    nums = nums.sort(function(a, b) {\n        return a - b;\n    });\n    \n    var rtn = nums.slice(0, 3).reduce((sum, a) => sum + a,0);\n    var dif = Math.abs(rtn - target);\n    \n    for (var i = 0; i < nums.length - 2; i++) {\n        for (var j = i + 1, k = nums.length - 1; j < k;) {\n            var sum = nums[i] + nums[j] + nums[k];\n            if (sum - target === 0) {\n                return target;\n            } else if (Math.abs(sum - target) < dif) {\n                dif = Math.abs(sum - target);\n                rtn = sum;\n            }\n            \n            if (nums[i] + nums[j] + nums[k] - target > 0) {\n                k--;\n            } else {\n                j++;\n            }\n        }\n    }\n    return rtn;\n};","lang":"javascript"},{"title":"Letter Combinations of a Phone Number","titleSlug":"letter-combinations-of-a-phone-number","status":"ac","content":"<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>\r\n\r\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\r\n\r\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\" /></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;23&quot;\r\n<strong>Output:</strong> [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\r\n","code":"/**\n * @param {string} digits\n * @return {string[]}\n */\nlet letterCombinations = function(digits) {\n    const map = {\n\t\t\"2\": [\"a\", \"b\", \"c\"],\n\t\t\"3\": [\"d\", \"e\", \"f\"],\n\t\t\"4\": [\"g\", \"h\", \"i\"],\n\t\t\"5\": [\"j\", \"k\", \"l\"],\n\t\t\"6\": [\"m\", \"n\", \"o\"],\n\t\t\"7\": [\"p\", \"q\", \"r\", \"s\"],\n\t\t\"8\": [\"t\", \"u\", \"v\"],\n\t\t\"9\": [\"w\", \"x\", \"y\", \"z\"]\n\t};\n    \n    function appendLetter(pee, per) {\n        let a = [];\n        for(let i = 0; i < pee.length; i++){\n            for(let j = 0; j < per.length; j++){\n                a.push(pee[i] + per[j]);\n            }    \n        }\n        return a;\n    }\n    \n    function combLetter(arr, nums) {\n        if(!nums) {\n            return arr;\n        }\n        return combLetter(appendLetter(arr, map[nums[0]]), nums.slice(1));\n    }\n    \n    if(!digits)\n        return [];\n    return combLetter(map[digits[0]], digits.slice(1));\n};","lang":"javascript"},{"title":"4Sum","titleSlug":"4sum","status":"ac","content":"<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The solution set must not contain duplicate quadruplets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [1, 0, -1, 0, -2, 2], and target = 0.\r\n\r\nA solution set is:\r\n[\r\n  [-1,  0, 0, 1],\r\n  [-2, -1, 1, 2],\r\n  [-2,  0, 0, 2]\r\n]\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    var rtn = [];\n    if (nums.length < 4) {\n        return rtn;\n    }\n    \n    nums = nums.sort(function(a, b) {\n        return a - b;\n    });\n    const res = new Set();\n    \n    for (var m = 0; m < nums.length - 3; m++) {\n        for (var i = m + 1; i < nums.length - 2; i++) {\n            for (var j = i + 1, k = nums.length - 1; j < k;) {\n                if (nums[m] + nums[i] + nums[j] + nums[k] === target) {\n                    const abcd = [nums[m], nums[i], nums[j], nums[k]];\n                    res.add(abcd.sort().join(','));\n                    j++;\n                    k--;\n                } else if (nums[m] + nums[i] + nums[j] + nums[k] > target) {\n                    k--;\n                } else {\n                    j++;\n                }\n            }\n        }\n    }\n    \n    rtn = [...res].map(abcd => abcd.split(',').map(e => parseInt(e)));\n    return rtn;\n};","lang":"javascript"},{"title":"Remove Nth Node From End of List","titleSlug":"remove-nth-node-from-end-of-list","status":"ac","content":"<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven linked list: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, and <strong><em>n</em> = 2</strong>.\r\n\r\nAfter removing the second node from the end, the linked list becomes <strong>1-&gt;2-&gt;3-&gt;5</strong>.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Given <em>n</em> will always be valid.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Could you do this in one pass?</p>\r\n","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    function getNode(h, m) {\n        var rst = h;\n        while(m > 0) {\n            rst = rst.next;\n            m--;\n        }\n        return rst;\n    }\n    \n    var l = head;\n    var r = getNode(head, n);\n    if (!r) return head.next;\n    \n    while(r.next) {\n        r = r.next;\n        l = l.next;\n    }\n    l.next = l.next.next;\n    \n    return head;\n};","lang":"javascript"},{"title":"Valid Parentheses","titleSlug":"valid-parentheses","status":"ac","content":"<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\r\n\r\n<p>An input string is valid if:</p>\r\n\r\n<ol>\r\n\t<li>Open brackets must be closed by the same type of brackets.</li>\r\n\t<li>Open brackets must be closed in the correct order.</li>\r\n</ol>\r\n\r\n<p>Note that an empty string is&nbsp;also considered valid.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;()&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;()[]{}&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(]&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;([)]&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;{[]}&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n","code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const map = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    \n    s = s.split('');\n    let t = [];\n    \n    while(s.length) {\n        if (!map[s[0]]) {\n            t.push(s[0]);\n            s.splice(0, 1)\n        } else if (t.length && t[t.length - 1] === map[s[0]]) {\n            t.splice(t.length - 1, 1);\n            s.splice(0, 1);\n        } else {\n            return false;\n        }\n    }\n    \n    if(t.length) return false;\n    \n    return true;\n};","lang":"javascript"},{"title":"Merge Two Sorted Lists","titleSlug":"merge-two-sorted-lists","status":"ac","content":"<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> 1->2->4, 1->3->4\r\n<b>Output:</b> 1->1->2->3->4->4\r\n</pre>\r\n</p>","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    let mergedList = new ListNode(0);\n    let p = mergedList;\n    \n    while(l1 && l2) {\n        if(l1.val < l2.val) {\n            p.next = l1;\n            l1 = l1.next;\n        } else {\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    if(l1) p.next = l1;\n    if(l2) p.next = l2;\n    \n    return mergedList.next;\n};","lang":"javascript"},{"title":"Generate Parentheses","titleSlug":"generate-parentheses","status":"ac","content":"<p>\r\nGiven <i>n</i> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\r\n</p>\r\n\r\n<p>\r\nFor example, given <i>n</i> = 3, a solution set is:\r\n</p>\r\n<pre>\r\n[\r\n  \"((()))\",\r\n  \"(()())\",\r\n  \"(())()\",\r\n  \"()(())\",\r\n  \"()()()\"\r\n]\r\n</pre>","code":"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    let ans = [];\n    function backtrack(s = '', left = 0, right = 0) {\n        if(s.length === 2 * n) {\n            ans.push(s);\n            return;\n        }\n        if(left < n)\n            backtrack(s+'(', left+1, right);\n        if(right < left)\n            backtrack(s+')', left, right+1);\n    }\n    backtrack();\n    return ans;\n};","lang":"javascript"},{"title":"Merge k Sorted Lists","titleSlug":"merge-k-sorted-lists","status":"ac","content":"<p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; 1-&gt;4-&gt;5,\r\n&nbsp; 1-&gt;3-&gt;4,\r\n&nbsp; 2-&gt;6\r\n]\r\n<strong>Output:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\r\n</pre>\r\n","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    var mergeTwoLists = function(l1, l2) {\n        let mergedList = new ListNode(0);\n        let p = mergedList;\n\n        while(l1 && l2) {\n            if(l1.val < l2.val) {\n                p.next = l1;\n                l1 = l1.next;\n            } else {\n                p.next = l2;\n                l2 = l2.next;\n            }\n            p = p.next;\n        }\n        if(l1) p.next = l1;\n        if(l2) p.next = l2;\n\n        return mergedList.next;\n    };\n    \n    if(!lists.length) return null;\n    if(lists.length === 1) return lists[0];\n    lists.push(mergeTwoLists(lists[0], lists[1]));\n    lists.splice(0, 2);\n    return mergeKLists(lists);\n};","lang":"javascript"},{"title":"Swap Nodes in Pairs","titleSlug":"swap-nodes-in-pairs","status":"ac","content":"<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head.</p>\r\n\r\n<p>You may <strong>not</strong> modify the values in the list&#39;s nodes, only nodes itself may be changed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.\r\n</pre>\r\n","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    if(!head || !head.next) \n        return head;\n    let r = head.next;\n    head.next = r.next\n    r.next = head;\n    head.next = swapPairs(head.next);\n    return r;\n};","lang":"javascript"}]