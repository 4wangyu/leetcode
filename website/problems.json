[{"title":"Two Sum","titleSlug":"two-sum","status":"ac","content":"<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\r\n\r\n<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,\r\nreturn [<strong>0</strong>, <strong>1</strong>].\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n  var map = new Map();\n  var len = nums.length;\n  \n  for(var i = 0; i < len; i++){\n      var num = nums[i];\n      var complement = target - num;\n      if(map.has(complement)){\n         return [map.get(complement), i];\n      } else {\n        map.set(num, i);\n      }\n  }\n};","lang":"javascript"},{"title":"Add Two Numbers","titleSlug":"add-two-numbers","status":"ac","content":"<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    var head = new ListNode(0);\n    var tail = head;\n    var carryover = 0;\n    \n    while(l1 != null || l2 != null){\n        var sum = (l1 == null ? 0 : l1.val) \n                  + (l2 == null ? 0 : l2.val) \n                  + carryover;\n        carryover = Math.floor(sum / 10);\n        var nextNode = new ListNode(sum % 10);\n        tail.next = nextNode;\n        tail = tail.next;\n        l1 = l1 ? l1.next : null;\n        l2 = l2 ? l2.next : null;\n    }\n    \n    if(carryover > 0){\n        var nextNode = new ListNode(carryover);\n        tail.next = nextNode;\n    }\n    \n    return head.next;\n};","lang":"javascript"},{"title":"Longest Substring Without Repeating Characters","titleSlug":"longest-substring-without-repeating-characters","status":"ac","content":"<p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abcabcbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation:</strong></span> The answer is <code>&quot;abc&quot;</code>, with the length of 3. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;bbbbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong>T</span>he answer is <code>&quot;b&quot;</code>, with the length of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;pwwkew&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>The answer is <code>&quot;wke&quot;</code>, with the length of 3. \r\n             Note that the answer must be a <b>substring</b>, <code>&quot;pwke&quot;</code> is a <i>subsequence</i> and not a substring.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var len = s.length;\n    var max = 0;\n    var map = new Map();\n    \n    for(var i = 0; i < len; i++){\n        var c = s.charAt(i);\n        while(map.has(c)) map.delete(map.keys().next().value);\n        map.set(c, 1);\n        max = Math.max(max, map.size);\n    }\n    \n    return max;\n};","lang":"javascript"},{"title":"Median of Two Sorted Arrays","titleSlug":"median-of-two-sorted-arrays","status":"ac","content":"<p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p>\r\n\r\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\r\n\r\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong>&nbsp;cannot be both empty.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 3]\r\nnums2 = [2]\r\n\r\nThe median is 2.0\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\nThe median is (2 + 3)/2 = 2.5\r\n</pre>\r\n","code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);\n    \n    const x = nums1.length, y = nums2.length;\n    let lo = 0, hi = x;\n    \n    while(lo <= hi) {\n        let partitionX = (lo + hi) / 2 | 0,\n            partitionY = (x + y + 1) / 2 - partitionX | 0;\n        \n        let maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\n        let minRightX = partitionX === x ? Infinity : nums1[partitionX];\n        \n        let maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\n        let minRightY = partitionY === y ? Infinity : nums2[partitionY];\n        \n        if(maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if((x + y) & 1) return Math.max(maxLeftX, maxLeftY);\n            return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n        } else if(maxLeftX > minRightY) {\n            hi = partitionX - 1;\n        } else {\n            lo = partitionX + 1;\n        }\n    }\n};","lang":"javascript"},{"title":"Longest Palindromic Substring","titleSlug":"longest-palindromic-substring","status":"ac","content":"<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;babad&quot;\r\n<strong>Output:</strong> &quot;bab&quot;\r\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;cbbd&quot;\r\n<strong>Output:</strong> &quot;bb&quot;\r\n</pre>\r\n","code":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    var len = s.length;\n    var pal = \"\";\n    \n    var offset = 1;\n    for(var i = 0; i < len; i++){\n        if(i < len - 1 && s.charAt(i) == s.charAt(i+1)){\n            while(i-offset >= 0 && i+1+offset < len \n                  && s.charAt(i-offset) ==  s.charAt(i+1+offset)){\n                offset ++;\n            }\n            var palEven = s.substring(i+1-offset, i+1+offset);\n            pal = pal.length >= palEven.length ? pal : palEven;\n            offset = 1;\n        }\n        \n        while(i-offset >= 0 && i+offset < len \n              && s.charAt(i-offset) ==  s.charAt(i+offset)){\n            offset ++;\n        }\n        var palOdd = s.substring(i+1-offset, i+offset);\n        pal = pal.length >= palOdd.length ? pal : palOdd;\n        offset = 1;\n    }\n    \n    return pal;\n};","lang":"javascript"},{"title":"ZigZag Conversion","titleSlug":"zigzag-conversion","status":"ac","content":"<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\r\n\r\n<pre>\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n</pre>\r\n\r\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\r\n\r\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\r\n\r\n<pre>\r\nstring convert(string s, int numRows);</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\r\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows =&nbsp;4\r\n<strong>Output:</strong>&nbsp;&quot;PINALSIGYAHRPI&quot;\r\n<strong>Explanation:</strong>\r\n\r\nP     I    N\r\nA   L S  I G\r\nY A   H R\r\nP     I</pre>\r\n","code":"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    if(numRows == 1) return s;\n    \n    var getChar = function(str, idx){\n        if(idx < 0 || idx >= str.length) return '';\n        return str.charAt(idx);\n    }\n    \n    var out = '';\n    var len = s.length;\n    for(var i = 0; i < numRows; i++){\n        var pos = 0;\n        while(pos + 2 - numRows <= len){\n            if(i == 0 || i == numRows - 1){\n                out += getChar(s, pos + i);\n            } else {\n                out += getChar(s, pos - i) + getChar(s, pos + i);\n            }\n            pos += 2 * numRows - 2;\n        }\n    }\n    \n    return out;\n};","lang":"javascript"},{"title":"Reverse Integer","titleSlug":"reverse-integer","status":"ac","content":"<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 123\r\n<strong>Output:</strong> 321\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -123\r\n<strong>Output:</strong> -321\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 120\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n","code":"/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(y) {\n    var reverseAbs = function(x){\n        if (x == 0) return '';\n        return x%10 + reverseAbs(Math.floor(x/10));\n    }\n    var limit = 2147483648;\n    var rvsdY = reverseAbs(Math.abs(y));\n    \n    if(rvsdY > limit || y == 0) return 0;\n    return parseInt((y < 0 ? '-' : '') + rvsdY);\n};\n","lang":"javascript"},{"title":"String to Integer (atoi)","titleSlug":"string-to-integer-atoi","status":"ac","content":"<p>Implement <code><span>atoi</span></code> which&nbsp;converts a string to an integer.</p>\r\n\r\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\r\n\r\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\r\n\r\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\r\n\r\n<p>If no valid conversion could be performed, a zero value is returned.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li>\r\n\t<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. If the numerical value is out of the range of representable values, INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) or INT_MIN (&minus;2<sup>31</sup>) is returned.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;42&quot;\r\n<strong>Output:</strong> 42\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;   -42&quot;\r\n<strong>Output:</strong> -42\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;-&#39;, which is the minus sign.\r\n&nbsp;            Then take as many numerical digits as possible, which gets 42.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;4193 with words&quot;\r\n<strong>Output:</strong> 4193\r\n<strong>Explanation:</strong> Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;words and 987&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;w&#39;, which is not a numerical \r\n&nbsp;            digit or a +/- sign. Therefore no valid conversion could be performed.</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;-91283472332&quot;\r\n<strong>Output:</strong> -2147483648\r\n<strong>Explanation:</strong> The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.\r\n&nbsp;            Thefore INT_MIN (&minus;2<sup>31</sup>) is returned.</pre>\r\n","code":"/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n    const INT_MAX = Math.pow(2, 31) - 1;\n    const INT_MIN = Math.pow(2, 31) * -1;\n    \n    const i = parseInt(str.trim().split(' ')[0]);\n    \n    if(isNaN(i)) return 0;\n    if(i < INT_MIN) return INT_MIN;\n    if(i > INT_MAX) return INT_MAX;\n    return i;\n};","lang":"javascript"},{"title":"Palindrome Number","titleSlug":"palindrome-number","status":"ac","content":"<p>Determine whether an integer is a palindrome. An integer&nbsp;is&nbsp;a&nbsp;palindrome when it&nbsp;reads the same backward as forward.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 121\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -121\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Coud you solve&nbsp;it without converting the integer to a string?</p>\r\n","code":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n//     solution 1\n//     let a = x.toString().split('');\n    \n//     return a.slice(0, Math.ceil(a.length/2)).join('') \n//         == a.slice(a.length - Math.ceil(a.length/2), a.length).reverse().join('');\n    \n    let str = x.toString();\n    function isPal(s) {\n        if([0, 1].includes(s.length))\n            return true;\n        if(s.slice(0,1) != s.slice(s.length-1, s.length))\n            return false;\n        return isPal(s.slice(1,s.length-1));\n    }\n    \n    return isPal(str);\n};","lang":"javascript"},{"title":"Regular Expression Matching","titleSlug":"regular-expression-matching","status":"ac","content":"<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>\n\n<pre>\n&#39;.&#39; Matches any single character.\n&#39;*&#39; Matches zero or more of the preceding element.\n</pre>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;could be empty and contains only lowercase letters <code>a-z</code>.</li>\n\t<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like&nbsp;<code>.</code>&nbsp;or&nbsp;<code>*</code>.</li>\n</ul>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n","code":"/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    return new RegExp('^'+p+'$').test(s);\n};\n","lang":"javascript"},{"title":"Container With Most Water","titleSlug":"container-with-most-water","status":"ac","content":"<p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n&nbsp;</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You may not slant the container and <i>n</i> is at least 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" /></p>\r\n\r\n<p><small>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49. </small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,8,6,2,5,4,8,3,7]\r\n<strong>Output:</strong> 49</pre>\r\n","code":"/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    let l = 0, r = height.length - 1, max = 0;\n    \n    while (l < r){\n        let area = Math.min(height[l], height[r]) * (r - l);\n        max = max >= area ? max : area;\n        if(height[l] < height[r]){\n            l++;\n        } else {\n            r--;\n        }\n    }\n    \n    return max;\n};","lang":"javascript"}]